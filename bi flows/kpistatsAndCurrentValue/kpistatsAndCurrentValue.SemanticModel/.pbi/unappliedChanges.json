{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "apikey",
      "lineageTag": "8a4fb3c7-a45b-4995-a93e-338347e4e6e2",
      "navigationStepName": "Navigation",
      "text": [
        "\"put your API KEY\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "getallkpis",
      "lineageTag": "10b7fc07-92ee-4298-8af6-76dad3851cc8",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    // Check if the apiKey parameter is empty",
        "    apikey = Text.Trim(apikey), // Trim any whitespace around the apiKey",
        "    _ = if Text.Length(apikey) = 0 then",
        "            error Error.Record(\"Invalid API Key\", \"The API key cannot be empty.\", null)",
        "        else ",
        "            null,",
        "",
        "    // Define the base URL",
        "    BaseUrl = \"https://api.ptvgroup.tech/kpieng/v1/instance/all\",",
        "",
        "    // Set the headers",
        "    Headers = [",
        "        #\"apiKey\" = apikey,",
        "        Accept = \"*/*\",",
        "        Connection = \"keep-alive\"",
        "    ],",
        "",
        "    // Make the web request",
        "    Source = Json.Document(Web.Contents(BaseUrl, [Headers = Headers])),",
        "",
        "    // Convert JSON response to table",
        "    ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(ResponseTable, \"Column1\", {\"name\", \"location\", \"kpiId\",\"kpiInstanceParameters\"}, {\"Column1.name\", \"Column1.location\", \"Column1.kpiId\",\"Column1.kpiInstanceParameters\"}),",
        "    #\"Expanded Column1.location\" = Table.ExpandRecordColumn(#\"Expanded Column1\", \"Column1.location\", {\"name\", \"shape\", \"locationId\", \"locationType\"}, {\"Column1.location.name\", \"Column1.location.shape\", \"Column1.location.locationId\", \"Column1.location.locationType\"}),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Expanded Column1.location\",{\"Column1.name\", \"Column1.location.name\", \"Column1.kpiId\", \"Column1.location.shape\", \"Column1.location.locationId\", \"Column1.location.locationType\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\",{{\"Column1.location.shape\", \"geometry\"}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Value\", each 1),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Added Custom\",{{\"Value\", Int64.Type}}),",
        "    #\"Expanded Column1.kpiInstanceParameters\" = Table.ExpandRecordColumn(#\"Changed Type\", \"Column1.kpiInstanceParameters\", {\"parameters\"}, {\"Column1.kpiInstanceParameters.parameters\"}),",
        "    #\"Expanded Column1.kpiInstanceParameters.parameters\" = Table.ExpandRecordColumn(#\"Expanded Column1.kpiInstanceParameters\", \"Column1.kpiInstanceParameters.parameters\", {\"timetostart\"}, {\"Column1.kpiInstanceParameters.parameters.timetostart\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded Column1.kpiInstanceParameters.parameters\",{{\"Column1.kpiInstanceParameters.parameters.timetostart\", \"forecast\"}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns1\",{{\"forecast\", type number}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    // Check if the apiKey parameter is empty\\r\\n    apikey = Text.Trim(apikey), // Trim any whitespace around the apiKey\\r\\n    _ = if Text.Length(apikey) = 0 then\\r\\n            error Error.Record(\\\"Invalid API Key\\\", \\\"The API key cannot be empty.\\\", null)\\r\\n        else \\r\\n            null,\\r\\n\\r\\n    // Define the base URL\\r\\n    BaseUrl = \\\"https://api.ptvgroup.tech/kpieng/v1/instance/all\\\",\\r\\n\\r\\n    // Set the headers\\r\\n    Headers = [\\r\\n        #\\\"apiKey\\\" = apikey,\\r\\n        Accept = \\\"*/*\\\",\\r\\n        Connection = \\\"keep-alive\\\"\\r\\n    ],\\r\\n\\r\\n    // Make the web request\\r\\n    Source = Json.Document(Web.Contents(BaseUrl, [Headers = Headers])),\\r\\n\\r\\n    // Convert JSON response to table\\r\\n    ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\r\\n    #\\\"Expanded Column1\\\" = Table.ExpandRecordColumn(ResponseTable, \\\"Column1\\\", {\\\"name\\\", \\\"location\\\", \\\"kpiId\\\",\\\"kpiInstanceParameters\\\"}, {\\\"Column1.name\\\", \\\"Column1.location\\\", \\\"Column1.kpiId\\\",\\\"Column1.kpiInstanceParameters\\\"}),\\r\\n    #\\\"Expanded Column1.location\\\" = Table.ExpandRecordColumn(#\\\"Expanded Column1\\\", \\\"Column1.location\\\", {\\\"name\\\", \\\"shape\\\", \\\"locationId\\\", \\\"locationType\\\"}, {\\\"Column1.location.name\\\", \\\"Column1.location.shape\\\", \\\"Column1.location.locationId\\\", \\\"Column1.location.locationType\\\"}),\\r\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Expanded Column1.location\\\",{\\\"Column1.name\\\", \\\"Column1.location.name\\\", \\\"Column1.kpiId\\\", \\\"Column1.location.shape\\\", \\\"Column1.location.locationId\\\", \\\"Column1.location.locationType\\\"}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Reordered Columns\\\",{{\\\"Column1.location.shape\\\", \\\"geometry\\\"}}),\\r\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"Value\\\", each 1),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Added Custom\\\",{{\\\"Value\\\", Int64.Type}}),\\r\\n    #\\\"Expanded Column1.kpiInstanceParameters\\\" = Table.ExpandRecordColumn(#\\\"Changed Type\\\", \\\"Column1.kpiInstanceParameters\\\", {\\\"parameters\\\"}, {\\\"Column1.kpiInstanceParameters.parameters\\\"}),\\r\\n    #\\\"Expanded Column1.kpiInstanceParameters.parameters\\\" = Table.ExpandRecordColumn(#\\\"Expanded Column1.kpiInstanceParameters\\\", \\\"Column1.kpiInstanceParameters.parameters\\\", {\\\"timetostart\\\"}, {\\\"Column1.kpiInstanceParameters.parameters.timetostart\\\"}),\\r\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Expanded Column1.kpiInstanceParameters.parameters\\\",{{\\\"Column1.kpiInstanceParameters.parameters.timetostart\\\", \\\"forecast\\\"}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns1\\\",{{\\\"forecast\\\", type number}})\\r\\nin\\r\\n    #\\\"Changed Type1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "AllKpiStats",
      "lineageTag": "eca33f93-c1e9-4b34-baa4-15482ecb7aa0",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    // Define the API key parameter",
        "    apikey = apikey,",
        "",
        "    // Fetch all KPI IDs",
        "    getallkpis = let",
        "        Source = Json.Document(Web.Contents(\"https://api.ptvgroup.tech/kpieng/v1/instance/all\", [Headers=[apiKey=apikey]])),",
        "        ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "        ExpandedColumns = Table.ExpandRecordColumn(ResponseTable, \"Column1\", {\"kpiId\"}, {\"kpiId\"})",
        "    in",
        "        ExpandedColumns,",
        "",
        "    // List of weekdays",
        "    weekdays = {\"MONDAY\", \"TUESDAY\", \"WEDNESDAY\", \"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\"},",
        "",
        "    // Function to fetch stats for a specific kpiId and dayOfWeek",
        "    FetchStats = (kpiId as text, dayOfWeek as text) =>",
        "    let",
        "        BaseUrl = \"https://api.ptvgroup.tech/kpistats/v1/stats/by-kpi-id\",",
        "        FullUrl = BaseUrl & \"?\" & \"kpiId=\" & kpiId & \"&dayOfWeek=\" & dayOfWeek,",
        "        Headers = [",
        "            #\"apiKey\" = apikey,",
        "            Accept = \"*/*\",",
        "            Connection = \"keep-alive\"",
        "        ],",
        "        Source = try Json.Document(Web.Contents(FullUrl, [Headers = Headers])) otherwise null,",
        "        ResponseTable = if Source <> null then Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error) else null,",
        "        ExpandedColumns = if ResponseTable <> null then Table.ExpandRecordColumn(ResponseTable, \"Column1\", {\"kpiId\", \"timeStamp\", \"hourOfDay\", \"dayOfTheWeek\", \"mean\", \"stddev\", \"quantiles\"}, {\"kpiId\", \"timeStamp\", \"hourOfDay\", \"dayOfTheWeek\", \"mean\", \"stddev\", \"quantiles\"}) else null,",
        "        ExpandedQuantiles = if ExpandedColumns <> null then Table.ExpandListColumn(ExpandedColumns, \"quantiles\") else null,",
        "        FinalTable = if ExpandedQuantiles <> null then Table.ExpandRecordColumn(ExpandedQuantiles, \"quantiles\", {\"rank\", \"quantile\"}, {\"rank\", \"quantile\"}) else null",
        "    in",
        "        FinalTable,",
        "",
        "    // Combine results for each kpiId and each dayOfWeek",
        "    CombinedResults = Table.Combine(",
        "        List.Transform(getallkpis[kpiId], each ",
        "            let",
        "                kpiId = _,",
        "                StatsForAllDays = List.RemoveNulls(",
        "                    List.Transform(weekdays, each FetchStats(kpiId, _))",
        "                )",
        "            in",
        "                if List.Count(StatsForAllDays) > 0 then Table.Combine(StatsForAllDays) else null",
        "        )",
        "    ),",
        "",
        "    // Remove null entries from the combined results",
        "    NonNullResults = Table.RemoveRowsWithErrors(CombinedResults),",
        "",
        "    // Change data types of certain columns",
        "    #\"Changed Type\" = Table.TransformColumnTypes(NonNullResults,{{\"mean\", type number}, {\"stddev\", type number}, {\"quantile\", type number}, {\"hourOfDay\", Int64.Type}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"mean\", \"meanUTC\"}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"TZ\", each TIMEZONE),",
        "    #\"Calculated Absolute Value\" = Table.TransformColumns(#\"Added Custom\",{{\"TZ\", Number.Abs, type number}}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Calculated Absolute Value\",{{\"meanUTC\", \"meanTT\"}})",
        "in",
        "    #\"Renamed Columns1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    // Define the API key parameter\\r\\n    apikey = apikey,\\r\\n\\r\\n    // Fetch all KPI IDs\\r\\n    getallkpis = let\\r\\n        Source = Json.Document(Web.Contents(\\\"https://api.ptvgroup.tech/kpieng/v1/instance/all\\\", [Headers=[apiKey=apikey]])),\\r\\n        ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\r\\n        ExpandedColumns = Table.ExpandRecordColumn(ResponseTable, \\\"Column1\\\", {\\\"kpiId\\\"}, {\\\"kpiId\\\"})\\r\\n    in\\r\\n        ExpandedColumns,\\r\\n\\r\\n    // List of weekdays\\r\\n    weekdays = {\\\"MONDAY\\\", \\\"TUESDAY\\\", \\\"WEDNESDAY\\\", \\\"THURSDAY\\\", \\\"FRIDAY\\\", \\\"SATURDAY\\\", \\\"SUNDAY\\\"},\\r\\n\\r\\n    // Function to fetch stats for a specific kpiId and dayOfWeek\\r\\n    FetchStats = (kpiId as text, dayOfWeek as text) =>\\r\\n    let\\r\\n        BaseUrl = \\\"https://api.ptvgroup.tech/kpistats/v1/stats/by-kpi-id\\\",\\r\\n        FullUrl = BaseUrl & \\\"?\\\" & \\\"kpiId=\\\" & kpiId & \\\"&dayOfWeek=\\\" & dayOfWeek,\\r\\n        Headers = [\\r\\n            #\\\"apiKey\\\" = apikey,\\r\\n            Accept = \\\"*/*\\\",\\r\\n            Connection = \\\"keep-alive\\\"\\r\\n        ],\\r\\n        Source = try Json.Document(Web.Contents(FullUrl, [Headers = Headers])) otherwise null,\\r\\n        ResponseTable = if Source <> null then Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error) else null,\\r\\n        ExpandedColumns = if ResponseTable <> null then Table.ExpandRecordColumn(ResponseTable, \\\"Column1\\\", {\\\"kpiId\\\", \\\"timeStamp\\\", \\\"hourOfDay\\\", \\\"dayOfTheWeek\\\", \\\"mean\\\", \\\"stddev\\\", \\\"quantiles\\\"}, {\\\"kpiId\\\", \\\"timeStamp\\\", \\\"hourOfDay\\\", \\\"dayOfTheWeek\\\", \\\"mean\\\", \\\"stddev\\\", \\\"quantiles\\\"}) else null,\\r\\n        ExpandedQuantiles = if ExpandedColumns <> null then Table.ExpandListColumn(ExpandedColumns, \\\"quantiles\\\") else null,\\r\\n        FinalTable = if ExpandedQuantiles <> null then Table.ExpandRecordColumn(ExpandedQuantiles, \\\"quantiles\\\", {\\\"rank\\\", \\\"quantile\\\"}, {\\\"rank\\\", \\\"quantile\\\"}) else null\\r\\n    in\\r\\n        FinalTable,\\r\\n\\r\\n    // Combine results for each kpiId and each dayOfWeek\\r\\n    CombinedResults = Table.Combine(\\r\\n        List.Transform(getallkpis[kpiId], each \\r\\n            let\\r\\n                kpiId = _,\\r\\n                StatsForAllDays = List.RemoveNulls(\\r\\n                    List.Transform(weekdays, each FetchStats(kpiId, _))\\r\\n                )\\r\\n            in\\r\\n                if List.Count(StatsForAllDays) > 0 then Table.Combine(StatsForAllDays) else null\\r\\n        )\\r\\n    ),\\r\\n\\r\\n    // Remove null entries from the combined results\\r\\n    NonNullResults = Table.RemoveRowsWithErrors(CombinedResults),\\r\\n\\r\\n    // Change data types of certain columns\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(NonNullResults,{{\\\"mean\\\", type number}, {\\\"stddev\\\", type number}, {\\\"quantile\\\", type number}, {\\\"hourOfDay\\\", Int64.Type}}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"mean\\\", \\\"meanUTC\\\"}}),\\r\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"TZ\\\", each TIMEZONE),\\r\\n    #\\\"Calculated Absolute Value\\\" = Table.TransformColumns(#\\\"Added Custom\\\",{{\\\"TZ\\\", Number.Abs, type number}}),\\r\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Calculated Absolute Value\\\",{{\\\"meanUTC\\\", \\\"meanTT\\\"}})\\r\\nin\\r\\n    #\\\"Renamed Columns1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DAYOFWEEK_PARAM",
      "lineageTag": "9916364c-1cda-4b4c-a8df-e9337aad74b9",
      "navigationStepName": "Navigation",
      "text": [
        "\"FRIDAY\" meta [IsParameterQuery=true, List={\"THURSDAY\", \"FRIDAY\", \"SATURDAY\", \"SUNDAY\", \"MONDAY\", \"TUESDAY\", \"WEDNESDAY\"}, DefaultValue=\"MONDAY\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "DAYOFWEEK",
      "lineageTag": "dd9607b7-4c05-4637-af25-f25733c69f3e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8vX3c3GMVIrViVYKCXUNhrHDXV38ELwQj9AgOMctyBPGDHYMCQ2Cc0IhJsUCAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [DAY = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"DAY\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45W8vX3c3GMVIrViVYKCXUNhrHDXV38ELwQj9AgOMctyBPGDHYMCQ2Cc0IhJsUCAA==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [DAY = _t]),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"DAY\\\", type text}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "last24hours",
      "lineageTag": "d55a0137-1860-4ed4-8fe0-e7ea8df5ca6b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    // Define the API key parameter",
        "    apikey = apikey,",
        "",
        "    // Fetch all KPI IDs",
        "    getallkpis = let",
        "        Source = Json.Document(Web.Contents(\"https://api.ptvgroup.tech/kpieng/v1/instance/all\", [Headers=[apiKey=apikey]])),",
        "        ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "        ExpandedColumns = Table.ExpandRecordColumn(ResponseTable, \"Column1\", {\"kpiId\"}, {\"kpiId\"})",
        "    in",
        "        ExpandedColumns,",
        "",
        "    // Function to fetch last 24 hours data for a specific kpiId",
        "    FetchLast24HoursData = (kpiId as text) =>",
        "    let",
        "        BaseUrl = \"https://api.ptvgroup.tech/kpieng/v1/result/by-kpi-id\",",
        "        FullUrl = BaseUrl & \"?\" & \"kpiId=\" & kpiId,",
        "        Headers = [",
        "            #\"apiKey\" = apikey,",
        "            Accept = \"*/*\",",
        "            Connection = \"keep-alive\"",
        "        ],",
        "        Source = try Json.Document(Web.Contents(FullUrl, [Headers = Headers])) otherwise null,",
        "        ResponseTable = if Source <> null then Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error) else null,",
        "        ExpandedColumns = if ResponseTable <> null then Table.ExpandRecordColumn(ResponseTable, \"Column1\", {\"kpiId\", \"timeStamp\", \"results\", \"overallResult\"}, {\"kpiId\", \"timeStamp\", \"results\", \"overallResult\"}) else null,",
        "        ExpandedResults = if ExpandedColumns <> null then Table.ExpandListColumn(ExpandedColumns, \"results\") else null,",
        "        FinalTable = if ExpandedResults <> null then Table.ExpandRecordColumn(ExpandedResults, \"results\", {\"value\", \"defaultValue\", \"unusualValue\", \"averageValue\", \"progressive\"}, {\"value\", \"defaultValue\", \"unusualValue\", \"averageValue\", \"progressive\"}) else null",
        "    in",
        "        FinalTable,",
        "",
        "    // Fetch last 24 hours data for each kpiId",
        "    Last24HoursData = Table.Combine(",
        "        List.Transform(getallkpis[kpiId], each FetchLast24HoursData(_))",
        "    ),",
        "",
        "    // Change data types of certain columns in Last24HoursData",
        "    #\"Changed Type Last24Hours\" = Table.TransformColumnTypes(Last24HoursData,{{\"value\", type number}, {\"defaultValue\", type number}, {\"unusualValue\", type number}, {\"averageValue\", type number}, {\"progressive\", type number}, {\"timeStamp\", type datetime}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type Last24Hours\",{\"value\", \"defaultValue\", \"unusualValue\", \"averageValue\", \"progressive\"}),",
        "    #\"Expanded overallResult\" = Table.ExpandRecordColumn(#\"Removed Columns\", \"overallResult\", {\"value\", \"defaultValue\", \"unusualValue\", \"averageValue\", \"progressive\"}, {\"overallResult.value\", \"overallResult.defaultValue\", \"overallResult.unusualValue\", \"overallResult.averageValue\", \"overallResult.progressive\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded overallResult\",{{\"overallResult.value\", type number}, {\"overallResult.defaultValue\", type number}, {\"overallResult.unusualValue\", type number}, {\"overallResult.averageValue\", type number}, {\"overallResult.progressive\", type number}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Changed Type\", \"TZ\", each TIMEZONE),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Custom\",{{\"timeStamp\", \"timeStampTZ\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    // Define the API key parameter\\r\\n    apikey = apikey,\\r\\n\\r\\n    // Fetch all KPI IDs\\r\\n    getallkpis = let\\r\\n        Source = Json.Document(Web.Contents(\\\"https://api.ptvgroup.tech/kpieng/v1/instance/all\\\", [Headers=[apiKey=apikey]])),\\r\\n        ResponseTable = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\r\\n        ExpandedColumns = Table.ExpandRecordColumn(ResponseTable, \\\"Column1\\\", {\\\"kpiId\\\"}, {\\\"kpiId\\\"})\\r\\n    in\\r\\n        ExpandedColumns,\\r\\n\\r\\n    // Function to fetch last 24 hours data for a specific kpiId\\r\\n    FetchLast24HoursData = (kpiId as text) =>\\r\\n    let\\r\\n        BaseUrl = \\\"https://api.ptvgroup.tech/kpieng/v1/result/by-kpi-id\\\",\\r\\n        FullUrl = BaseUrl & \\\"?\\\" & \\\"kpiId=\\\" & kpiId,\\r\\n        Headers = [\\r\\n            #\\\"apiKey\\\" = apikey,\\r\\n            Accept = \\\"*/*\\\",\\r\\n            Connection = \\\"keep-alive\\\"\\r\\n        ],\\r\\n        Source = try Json.Document(Web.Contents(FullUrl, [Headers = Headers])) otherwise null,\\r\\n        ResponseTable = if Source <> null then Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error) else null,\\r\\n        ExpandedColumns = if ResponseTable <> null then Table.ExpandRecordColumn(ResponseTable, \\\"Column1\\\", {\\\"kpiId\\\", \\\"timeStamp\\\", \\\"results\\\", \\\"overallResult\\\"}, {\\\"kpiId\\\", \\\"timeStamp\\\", \\\"results\\\", \\\"overallResult\\\"}) else null,\\r\\n        ExpandedResults = if ExpandedColumns <> null then Table.ExpandListColumn(ExpandedColumns, \\\"results\\\") else null,\\r\\n        FinalTable = if ExpandedResults <> null then Table.ExpandRecordColumn(ExpandedResults, \\\"results\\\", {\\\"value\\\", \\\"defaultValue\\\", \\\"unusualValue\\\", \\\"averageValue\\\", \\\"progressive\\\"}, {\\\"value\\\", \\\"defaultValue\\\", \\\"unusualValue\\\", \\\"averageValue\\\", \\\"progressive\\\"}) else null\\r\\n    in\\r\\n        FinalTable,\\r\\n\\r\\n    // Fetch last 24 hours data for each kpiId\\r\\n    Last24HoursData = Table.Combine(\\r\\n        List.Transform(getallkpis[kpiId], each FetchLast24HoursData(_))\\r\\n    ),\\r\\n\\r\\n    // Change data types of certain columns in Last24HoursData\\r\\n    #\\\"Changed Type Last24Hours\\\" = Table.TransformColumnTypes(Last24HoursData,{{\\\"value\\\", type number}, {\\\"defaultValue\\\", type number}, {\\\"unusualValue\\\", type number}, {\\\"averageValue\\\", type number}, {\\\"progressive\\\", type number}, {\\\"timeStamp\\\", type datetime}}),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type Last24Hours\\\",{\\\"value\\\", \\\"defaultValue\\\", \\\"unusualValue\\\", \\\"averageValue\\\", \\\"progressive\\\"}),\\r\\n    #\\\"Expanded overallResult\\\" = Table.ExpandRecordColumn(#\\\"Removed Columns\\\", \\\"overallResult\\\", {\\\"value\\\", \\\"defaultValue\\\", \\\"unusualValue\\\", \\\"averageValue\\\", \\\"progressive\\\"}, {\\\"overallResult.value\\\", \\\"overallResult.defaultValue\\\", \\\"overallResult.unusualValue\\\", \\\"overallResult.averageValue\\\", \\\"overallResult.progressive\\\"}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded overallResult\\\",{{\\\"overallResult.value\\\", type number}, {\\\"overallResult.defaultValue\\\", type number}, {\\\"overallResult.unusualValue\\\", type number}, {\\\"overallResult.averageValue\\\", type number}, {\\\"overallResult.progressive\\\", type number}}),\\r\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Changed Type\\\", \\\"TZ\\\", each TIMEZONE),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Added Custom\\\",{{\\\"timeStamp\\\", \\\"timeStampTZ\\\"}})\\r\\nin\\r\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "TIMEZONE",
      "lineageTag": "8115b54f-b0ee-42c7-b358-12897ededda1",
      "description": "a number that express the timezone to be applied to the all the visualized data (+-12)",
      "navigationStepName": "Navigation",
      "text": [
        "2 meta [IsParameterQuery=true, List={1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0}, DefaultValue=0, Type=\"Number\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Number",
      "isHidden": false
    }
  ],
  "queryGroups": [],
  "culture": "it-IT"
}