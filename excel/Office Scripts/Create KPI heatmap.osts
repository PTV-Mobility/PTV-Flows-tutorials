{"version":"0.3.0","body":"async function main(workbook: ExcelScript.Workbook) {\n    // Get the active worksheet\n    let sheet = workbook.getActiveWorksheet();\n\n    // Delete the \"HEATMAP\" sheet if it already exists\n    let heatmapSheet = workbook.getWorksheet(\"HEATMAP\");\n    if (heatmapSheet) {\n        heatmapSheet.delete();\n    }\n\n    // Create a new \"HEATMAP\" sheet\n    heatmapSheet = workbook.addWorksheet(\"HEATMAP\");\n\n    // Get the \"RESULTS\" table\n  let resultsTable = workbook.getTable(\"DETAILED_RESULTS\");\n    if (!resultsTable) {\n      console.log(\"DETAILED_RESULTS table not found. Please ensure the table exists.\");\n        return;\n    }\n\n    // Get the data from the \"RESULTS\" table\n    let dataRange = resultsTable.getRangeBetweenHeaderAndTotal();\n    let dataValues = dataRange.getValues() as Array<Array<string | number>>;\n\n    // Extract unique timestamps and progressive values\n    let timestamps: string[] = [];\n    let progressives: number[] = [];\n    let valueMap: { [key: number]: { [key: string]: number } } = {};\n\n    for (let row of dataValues) {\n        let progressive = row[0] as number; // Assuming progressive is in the first column\n        let timestamp = row[1] as string;   // Assuming timestamp is in the second column\n        let value = row[2] as number;       // Assuming value is in the third column\n\n        if (!timestamps.includes(timestamp)) {\n            timestamps.push(timestamp);\n        }\n        if (!progressives.includes(progressive)) {\n            progressives.push(progressive);\n        }\n        if (!valueMap[progressive]) {\n            valueMap[progressive] = {};\n        }\n        valueMap[progressive][timestamp] = value;\n    }\n\n    // Sort timestamps and progressives\n    timestamps.sort((a, b) => new Date(a).getTime() - new Date(b).getTime());\n    progressives.sort((a, b) => a - b);\n\n    // Write headers to the HEATMAP sheet\n    heatmapSheet.getRange(\"A1\").setValue(\"Progressive \\\\ Timestamp\");\n\n    // Set timestamp headers\n    for (let i = 0; i < timestamps.length; i++) {\n        heatmapSheet.getCell(0, i + 1).setValue(timestamps[i]);\n    }\n\n    // Set progressive headers\n    for (let i = 0; i < progressives.length; i++) {\n        heatmapSheet.getCell(i + 1, 0).setValue(progressives[i]);\n    }\n\n    // Prepare the data matrix\n    let dataMatrix: (number | string)[][] = [];\n\n    for (let i = 0; i < progressives.length; i++) {\n        let progressive = progressives[i];\n        let row: (number | string)[] = [];\n        for (let j = 0; j < timestamps.length; j++) {\n            let timestamp = timestamps[j];\n            let value = valueMap[progressive][timestamp];\n            // Use the value if it exists; otherwise, use empty string\n            row.push(value !== undefined ? value : \"\");\n        }\n        dataMatrix.push(row);\n    }\n\n    // Determine the range where the matrix will be placed\n    let startRow = 2; // Data starts from row 2\n    let startColumn = 2; // Data starts from column B\n    let numRows = dataMatrix.length;\n    let numCols = timestamps.length;\n\n    // Ensure there's data to write\n    if (numRows > 0 && numCols > 0) {\n        // Define the target range\n        let dataMatrixRange = heatmapSheet.getRangeByIndexes(\n            startRow - 1,       // rowIndex (zero-based)\n            startColumn - 1,    // columnIndex (zero-based)\n            numRows,            // number of rows\n            numCols             // number of columns\n        );\n\n        // Set the values in bulk\n        dataMatrixRange.setValues(dataMatrix);\n\n        // Apply conditional formatting (red to green gradient) per row\n        for (let i = 0; i < numRows; i++) {\n            let rowRange = heatmapSheet.getRangeByIndexes(\n                startRow - 1 + i,    // rowIndex of the current row (zero-based)\n                startColumn - 1,     // columnIndex (zero-based)\n                1,                   // number of rows: 1\n                numCols              // number of columns\n            );\n\n            let conditionalFormat = rowRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);\n            conditionalFormat.getColorScale().setCriteria({\n                minimum: {\n                    type: ExcelScript.ConditionalFormatColorCriterionType.lowestValue,\n                    color: \"green\"\n                },\n                midpoint: {\n                    type: ExcelScript.ConditionalFormatColorCriterionType.percentile,\n                    formula: \"50\",\n                    color: \"yellow\"\n                },\n                maximum: {\n                    type: ExcelScript.ConditionalFormatColorCriterionType.highestValue,\n                    color: \"red\"\n                }\n            });\n        }\n    } else {\n        console.log(\"No data available to create the heatmap matrix.\");\n        return;\n    }\n\n    // --- Additional Formatting ---\n\n    // Set the text orientation of timestamp headers (first row starting from column B)\n    let timestampHeaderRange = heatmapSheet.getRangeByIndexes(\n        0,                  // rowIndex (zero-based)\n        startColumn - 1,    // columnIndex (zero-based)\n        1,                  // number of rows\n        numCols             // number of columns\n    );\n    timestampHeaderRange.getFormat().setTextOrientation(-45); // Rotate text counterclockwise 45 degrees\n    timestampHeaderRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center); // Center-align headers\n\n    // Set the column widths of the data matrix columns to approximate 10 characters (75 points)\n    // Column widths are set per entire column, so we can loop over columns\n    // First, create the helper function to convert column index to letter\n    function columnIndexToLetter(columnIndex: number): string {\n        let columnLetter = '';\n        let temp = columnIndex;\n        while (temp >= 0) {\n            columnLetter = String.fromCharCode((temp % 26) + 65) + columnLetter;\n            temp = Math.floor(temp / 26) - 1;\n        }\n        return columnLetter;\n    }\n\n    // Loop over the data columns and set their widths\n    for (let i = 0; i < numCols; i++) {\n        let columnIndex = startColumn - 1 + i;\n        let columnLetter = columnIndexToLetter(columnIndex);\n        let columnRange: ExcelScript.Range = heatmapSheet.getRange(`${columnLetter}:${columnLetter}`);\n        columnRange.getFormat().setColumnWidth(75); // Set width to 75 points\n    }\n\n    // Optional: Center-align and format the data matrix\n    let dataMatrixRange = heatmapSheet.getRangeByIndexes(\n        startRow - 1,       // rowIndex (zero-based)\n        startColumn - 1,    // columnIndex (zero-based)\n        numRows,            // number of rows\n        numCols             // number of columns\n    );\n    dataMatrixRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center); // Center-align data\n    dataMatrixRange.setNumberFormat(\"0.00\"); // Format numbers to two decimal places\n\n    // Center-align the progressive headers (first column)\n    let progressiveHeaderRange = heatmapSheet.getRangeByIndexes(\n        startRow - 1,   // rowIndex (zero-based)\n        0,              // columnIndex (first column)\n        numRows,        // number of rows\n        1               // number of columns\n    );\n    progressiveHeaderRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.center); // Center-align progressive headers\n\n    // --- End of Additional Formatting ---\n\n    // Note: Removed autofitColumns() to maintain the specified column widths\n    // Auto-fit rows for better readability\n    heatmapSheet.getUsedRange().getFormat().autofitRows();\n\n    console.log(\"Heatmap created successfully in the 'HEATMAP' sheet.\");\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}