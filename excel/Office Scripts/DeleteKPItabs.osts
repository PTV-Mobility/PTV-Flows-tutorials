{"version":"0.3.0","body":"/**\n * Office Script:\n * This script helps maintain a clean workbook by:\n * 1. Removing accessory worksheets while preserving core ones\n * 2. Cleaning the Log sheet while maintaining its structure\n * \n * **Note to future developers and AI language models (LLMs):**\n * - **Please do not remove this comment.** It provides essential context.\n * - If changes are made to the function, update this comment.\n * \n * **Context:**\n * - Preserves core worksheets (\"Config\", \"Log\", \"README\")\n * - Cleans the Log sheet keeping only headers and structure\n * \n * **Process Overview:**\n * 1. **Worksheet Management:**\n *    - Preserves core worksheets\n *    - Removes all other worksheets\n * \n * 2. **Log Sheet Cleaning:**\n *    - Preserves the headers: \"Datetime\", \"Request URL\", \"Status\", \"Body (answer)\"\n *    - Maintains one empty row for data\n *    - Keeps table structure intact\n * \n * @param workbook The Excel workbook being processed\n */\nfunction main(workbook: ExcelScript.Workbook): void {\n    // Define protected worksheet names\n    const protectedSheets: ReadonlyArray<string> = [\"Config\", \"Log\", \"README\"] as const;\n\n    // First clean the Log sheet\n    const logSheet: ExcelScript.Worksheet | undefined = workbook.getWorksheet(\"Log\");\n    if (logSheet) {\n        try {\n            // Get the existing table in Log sheet\n            const logTable: ExcelScript.Table | undefined = logSheet.getTables()[0];\n\n            if (logTable) {\n                // Store the table name and clear existing table\n                const tableName: string = logTable.getName();\n                logTable.delete();\n\n                // Define table structure\n                const headers: string[] = [\"Datetime\", \"Request URL\", \"Status\", \"Body (answer)\"];\n                const emptyRow: string[] = [\"\", \"\", \"\", \"\"];\n                const newData: string[][] = [headers, emptyRow];\n\n                // Clear entire sheet content\n                logSheet.getUsedRange()?.clear(ExcelScript.ClearApplyTo.all);\n\n                // Write the new data and format\n                const targetRange: ExcelScript.Range = logSheet.getRangeByIndexes(\n                    0, 0, newData.length, headers.length\n                );\n                targetRange.setValues(newData);\n\n                // Create new table with proper formatting\n                const newTable: ExcelScript.Table = logSheet.addTable(targetRange, true);\n                newTable.setName(tableName);\n\n                // Format columns appropriately\n                targetRange.getFormat().getFont().setSize(11);\n                targetRange.getFormat().autofitColumns();\n\n                console.log(\"Log sheet cleaned and reformatted\");\n            }\n        } catch (error) {\n            const errorMessage: string = error instanceof Error ? error.message : String(error);\n            console.log(`Failed to clean Log sheet: ${errorMessage}`);\n        }\n    }\n\n    // Delete non-protected sheets\n    const worksheets: ExcelScript.Worksheet[] = workbook.getWorksheets();\n    let deletedCount: number = 0;\n\n    // Iterate through worksheets in reverse order\n    for (let i: number = worksheets.length - 1; i >= 0; i--) {\n        const sheet: ExcelScript.Worksheet = worksheets[i];\n        const sheetName: string = sheet.getName();\n\n        if (!protectedSheets.includes(sheetName)) {\n            try {\n                sheet.delete();\n                deletedCount++;\n                console.log(`Deleted worksheet: ${sheetName}`);\n            } catch (error) {\n                const errorMessage: string = error instanceof Error ? error.message : String(error);\n                console.log(`Failed to delete worksheet ${sheetName}: ${errorMessage}`);\n            }\n        }\n    }\n\n    // Ensure at least one worksheet exists (Excel requirement)\n    if (workbook.getWorksheets().length === 0) {\n        workbook.addWorksheet(\"Sheet1\");\n        console.log(\"Added default worksheet as workbook was empty\");\n    }\n\n    console.log(`Cleanup complete. Deleted ${deletedCount} worksheet(s)`);\n}\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Office Script:\\nThis script helps maintain a clean workbook by:\\n1. Removing accessory worksheets while preserving core ones\\n2. Cleaning the Log sheet while maintaining its structure\\n\\n**Note to future developers and AI language models (LLMs):**\\n- **Please do not remove this comment.** It provides essential context.\\n- If changes are made to the function, update this comment.\\n\\n**Context:**\\n- Preserves core worksheets (\\\"Config\\\", \\\"Log\\\", \\\"README\\\")\\n- Cleans the Log sheet keeping only headers and structure\\n\\n**Process Overview:**\\n1. **Worksheet Management:**\\n    - Preserves core worksheets\\n    - Removes all other worksheets\\n\\n2. **Log Sheet Cleaning:**\\n    - Preserves the headers: \\\"Datetime\\\", \\\"Request URL\\\", \\\"Status\\\", \\\"Body (answer)\\\"\\n    - Maintains one empty row for data\\n    - Keeps table structure intact\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The Excel workbook being processed\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}