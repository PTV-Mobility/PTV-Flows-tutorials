{"version":"0.3.0","body":"/**\n * Office 365 Script:\n * This script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\n * It retrieves the KPI Name from cell A3 of the 'Config' worksheet.\n * It then searches for the corresponding KPI ID in the 'KPI_list' table.\n * With the KPI ID, it constructs an API request to retrieve KPI data and writes the results to the 'Overall KPI Results' worksheet.\n * Additionally, it logs the request details in a 'Log' worksheet.\n *\n * IMPORTANT:\n * - Any future modifications to this script should take into account that it's an Office 365 Script.\n * - All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\n *\n * @param workbook The current workbook.\n */\n\nasync function main(workbook: ExcelScript.Workbook) {\n  // Get the \"Config\" worksheet\n  let configSheet = workbook.getWorksheet(\"Config\");\n  if (!configSheet) {\n    throw new Error(\"The 'Config' worksheet was not found.\");\n  }\n\n  // Read input parameters from the \"Config\" sheet\n  let kpiName = configSheet.getRange(\"A3\").getValue() as string; // Now retrieving KPI Name from cell A3\n  let fromTimeRange = configSheet.getRange(\"B3\"); // Assuming fromTime is in cell B3\n  let toTimeRange = configSheet.getRange(\"C3\");   // Assuming toTime is in cell C3\n  let timeAggregationRange = configSheet.getRange(\"D3\"); // timeAggregation in D3\n  let fromTime = fromTimeRange.getValue() as string;\n  let toTime = toTimeRange.getValue() as string;\n  let timeAggregation = timeAggregationRange.getValue() as string;\n  let apiKey = configSheet.getRange(\"B1\").getValue() as string; // Assuming apiKey is in B1\n\n  // Ensure the API key is provided\n  if (!apiKey) {\n    logRequest(workbook, \"https://api.ptvgroup.tech/hda/v1/kpi/overall/get\", \"Error: API key missing\");\n    return;\n  }\n\n  // **Get the kpiId corresponding to the KPI name from 'KPI_list' table**\n  // Access the 'KPI_list' table\n  let kpiListTable = workbook.getTable(\"KPI_list\");\n  if (!kpiListTable) {\n    throw new Error(\"The 'KPI_list' table was not found.\");\n  }\n\n  // Get the entire table range and values\n  let tableRange = kpiListTable.getRange();\n  let tableValues = tableRange.getValues() as (string | number)[][];\n\n  // Get the header row and data rows\n  let headers = tableValues[0] as string[];\n  let kpiListData = tableValues.slice(1);\n\n  // Find the index of 'KPI ID' and 'KPI Name' columns\n  let kpiIdIndex = headers.indexOf('KPI ID');\n  let kpiNameIndex = headers.indexOf('KPI Name');\n\n  if (kpiIdIndex === -1 || kpiNameIndex === -1) {\n    throw new Error(\"Columns 'KPI ID' or 'KPI Name' not found in 'KPI_list' table.\");\n  }\n\n  // Find the kpiId corresponding to kpiName\n  let kpiId: string | null = null;\n  let kpiNameFound = false;\n\n  for (let i = 0; i < kpiListData.length; i++) {\n    let row = kpiListData[i];\n    if (row[kpiNameIndex].toString().trim() === kpiName.trim()) { // Matching KPI Name\n      kpiId = row[kpiIdIndex].toString();\n      kpiNameFound = true;\n      break;\n    }\n  }\n\n  if (!kpiNameFound || !kpiId) {\n    throw new Error(`KPI Name '${kpiName}' not found in 'KPI_list' table.`);\n  }\n\n  // **Check if the time difference is more than allowed (e.g., maximum interval)**\n  const fromTimeDate = new Date(fromTime);\n  const toTimeDate = new Date(toTime);\n  const timeDiffMs = toTimeDate.getTime() - fromTimeDate.getTime();\n\n  // Example maximum interval check (e.g., max 365 days)\n  const maxIntervalMs = 365 * 24 * 60 * 60 * 1000; // 365 days in milliseconds\n\n  // Reset any previous error message and formatting in 'toTime' cell\n  toTimeRange.getFormat().getFont().setColor(\"black\");\n\n  if (isNaN(fromTimeDate.getTime()) || isNaN(toTimeDate.getTime())) {\n    // Invalid date format\n    const errorMessage = \"Error: Invalid date format in 'fromTime' or 'toTime'. Please use ISO 8601 format.\";\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else if (timeDiffMs > maxIntervalMs) {\n    // Interval exceeds maximum allowed\n    const errorMessage = `Error: The time interval between 'fromTime' and 'toTime' cannot exceed 365 days.`;\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().setHorizontalAlignment(ExcelScript.HorizontalAlignment.left);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else if (fromTimeDate > toTimeDate) {\n    // fromTime is after toTime\n    const errorMessage = \"Error: 'fromTime' must be before 'toTime'.\";\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else {\n    // Valid dates, reset any error message\n    //toTimeRange.setValue(toTime);\n    //toTimeRange.getFormat().getFont().setColor(\"black\");\n  }\n\n  // Validate timeAggregation parameter\n  const validTimeAggregations = [\"MINUTES_5\", \"MINUTES_15\", \"MINUTES_30\", \"HOURS_1\", \"DAYS_1\"];\n  if (!validTimeAggregations.includes(timeAggregation)) {\n    const errorMessage = `Error: Invalid 'timeAggregation' value in D3. Must be one of: ${validTimeAggregations.join(\", \")}.`;\n    timeAggregationRange.setValue(errorMessage);\n    timeAggregationRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else {\n    // Reset any formatting\n    timeAggregationRange.getFormat().getFont().setColor(\"black\");\n  }\n\n  // **Get or create the \"Overall KPI Results\" worksheet**\n  let overallSheet = workbook.getWorksheet(\"Overall KPI Results\");\n  if (!overallSheet) {\n    overallSheet = workbook.addWorksheet(\"Overall KPI Results\");\n  }\n\n  // Clear existing data in the sheet\n  let usedRange = overallSheet.getUsedRange();\n  if (usedRange) {\n    usedRange.clear();\n  }\n\n  // Construct the API URL\n  let apiUrl = `https://api.ptvgroup.tech/hda/v1/kpi/overall/get?kpiId=${encodeURIComponent(kpiId)}&fromTime=${encodeURIComponent(fromTime)}&toTime=${encodeURIComponent(toTime)}&timeAggregation=${encodeURIComponent(timeAggregation)}`;\n\n  try {\n    // Make the API call\n    let response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'apiKey': apiKey,\n        'User-Agent': 'OfficeScript'\n      }\n    });\n\n    if (!response.ok) {\n      logRequest(workbook, apiUrl, `Error: HTTP ${response.status}`);\n      return;\n    }\n\n    let data: OverallApiResponse = await response.json();\n    let dataArray = data.data;\n\n    // Sort the data array by timestamp\n    dataArray.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n\n    // Prepare the 2D array to write to the sheet\n    const resultHeaders = [\"timestamp\", \"value (min)\", \"unusualValue\", \"averageValue\", \"status\"];\n    const dataRows = dataArray.map(item => [\n      item.timestamp,\n      item.value,\n      item.unusualValue,\n      item.averageValue,\n      item.status\n    ]);\n    const fullData = [resultHeaders, ...dataRows];\n\n    // Write all data at once\n    const rowCount = fullData.length;\n    const columnCount = resultHeaders.length;\n    let targetRange = overallSheet.getRangeByIndexes(0, 0, rowCount, columnCount);\n    targetRange.setValues(fullData);\n\n    // Define the range for the table\n    let tableRange = overallSheet.getRangeByIndexes(0, 0, rowCount, columnCount);\n\n    // Add and name the table\n    let table = overallSheet.addTable(tableRange, true);\n    table.setName(\"KPIresults\"); // Table named \"KPIresults\"\n\n    // Auto-fit columns\n    overallSheet.getUsedRange().getFormat().autofitColumns();\n\n    // Log the success\n    logRequest(workbook, apiUrl, \"Success\");\n  } catch (error) {\n    // Handle any other errors\n    // Optionally, you can write the error message to a cell or log it\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, apiUrl, `Error: ${errorMessage}`);\n  }\n}\n\n/**\n * Logs API request details in a 'Log' worksheet.\n *\n * @param workbook The Excel workbook object.\n * @param requestUrl The request URL with the API key masked.\n * @param status The status or error message.\n */\nfunction logRequest(workbook: ExcelScript.Workbook, requestUrl: string, status: string) {\n  let logSheet = workbook.getWorksheet(\"Log\");\n  if (!logSheet) {\n    logSheet = workbook.addWorksheet(\"Log\");\n  }\n  let logTable = logSheet.getTables().find(table => table.getName() === \"RequestLog\");\n  const headers: string[] = [\"Datetime\", \"Request URL\", \"Status\"];\n  if (!logTable) {\n    let headerRange = logSheet.getRange(\"A1:C1\");\n    headerRange.setValues([headers]);\n    logTable = logSheet.addTable(headerRange, true);\n    logTable.setName(\"RequestLog\");\n  }\n  const now = new Date();\n  const timestamp = now.toISOString();\n  let safeUrl = requestUrl.replace(/apiKey=[^&]+/, \"apiKey=****\");\n  logTable.addRow(null, [timestamp, safeUrl, status, \"\"]);\n}\n\n// Interface for the Overall API response\ninterface OverallApiResponse {\n  meta: {\n    kpiId: string;\n    minT: string;\n    maxT: string;\n    result_size: number;\n    defaultValue: number;\n    pathLength: number;\n  };\n  data: Array<{\n    timestamp: string;\n    value: number;\n    unusualValue: number;\n    averageValue: number;\n    status: string;\n  }>;\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Office 365 Script:\\nThis script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\\nIt retrieves the KPI Name from cell A3 of the 'Config' worksheet.\\nIt then searches for the corresponding KPI ID in the 'KPI_list' table.\\nWith the KPI ID, it constructs an API request to retrieve KPI data and writes the results to the 'Overall KPI Results' worksheet.\\nAdditionally, it logs the request details in a 'Log' worksheet.\\n\\nIMPORTANT:\\n- Any future modifications to this script should take into account that it's an Office 365 Script.\\n- All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The current workbook.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}