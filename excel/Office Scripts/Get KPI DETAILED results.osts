{"version":"0.3.0","body":"/**\n * Office 365 Script:\n * This script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\n * It retrieves the KPI Name from cell A3 of the active worksheet.\n * It then searches for the corresponding KPI ID and Location ID in the 'KPI_list' table.\n * With the KPI ID, it constructs API requests to retrieve detailed KPI data and writes the results to the 'Detailed Results' worksheet.\n * Additionally, it logs the request details in a 'Log' worksheet.\n *\n * IMPORTANT:\n * - Any future modifications to this script should take into account that it's an Office 365 Script.\n * - All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\n *\n * @param workbook The current workbook.\n */\n\nasync function main(workbook: ExcelScript.Workbook) {\n  let sheet = workbook.getActiveWorksheet();\n\n  // Read input parameters from the sheet\n  let configSheet = workbook.getWorksheet(\"Config\");\n  if (!configSheet) {\n    console.log(\"The 'Config' worksheet was not found.\");\n    throw new Error(\"The 'Config' worksheet was not found.\");\n  }\n\n  let kpiName = configSheet.getRange(\"A3\").getValue() as string; // Now retrieving KPI Name from cell A3 in Config sheet\n  let fromTimeRange = configSheet.getRange(\"B3\");\n  let toTimeRange = configSheet.getRange(\"C3\");\n  let fromTime = fromTimeRange.getValue() as string;\n  let toTime = toTimeRange.getValue() as string;\n  let timeAggregation = configSheet.getRange(\"D3\").getValue() as string;\n  let apiKey = configSheet.getRange(\"B1\").getValue() as string;\n\n  // Add configuration logging\n  console.log(\"Configuration loaded:\");\n  console.log(\"-------------------\");\n  console.log(`KPI Name: ${kpiName}`);\n  console.log(`From Time: ${fromTime}`);\n  console.log(`To Time: ${toTime}`);\n  console.log(`Time Aggregation: ${timeAggregation}`);\n  console.log(`API Key: ${apiKey ? \"****\" + apiKey.slice(-4) : \"Not provided\"}`);\n  console.log(\"-------------------\");\n\n  // Ensure the API key is provided\n  if (!apiKey) {\n    logRequest(workbook, \"https://api.ptvgroup.tech/hda/v1/kpi/detailed/get\", \"Error: API key missing\");\n    return;\n  }\n\n  // **Get the kpiId and locationId corresponding to the KPI name from 'KPI_list' table**\n  // Access the 'KPI_list' table\n  let kpiListTable = workbook.getTable(\"KPI_list\");\n  if (!kpiListTable) {\n    console.log(\"The 'KPI_list' table was not found.\");\n    throw new Error(\"The 'KPI_list' table was not found.\");\n  }\n\n  // Get the entire table range and values\n  let tableRange = kpiListTable.getRange();\n  let tableValues = tableRange.getValues() as (string | number)[][];\n\n  // Get the header row and data rows\n  let headers = tableValues[0] as string[];\n  let kpiListData = tableValues.slice(1);\n\n  // Find the index of 'KPI ID', 'KPI Name', and 'Location ID' columns\n  let kpiIdIndex = headers.indexOf('KPI ID');\n  let kpiNameIndex = headers.indexOf('KPI Name');\n  let locationIdIndex = headers.indexOf('Location ID');\n\n  if (kpiIdIndex === -1 || kpiNameIndex === -1 || locationIdIndex === -1) {\n    console.log(\"Columns 'KPI ID', 'KPI Name', or 'Location ID' not found in 'KPI_list' table.\");\n    throw new Error(\"Columns 'KPI ID', 'KPI Name', or 'Location ID' not found in 'KPI_list' table.\");\n  }\n\n  // Find the kpiId and locationId corresponding to kpiName\n  let kpiId: string | null = null;\n  let locationId: string | null = null;\n  let kpiNameFound = false;\n\n  for (let i = 0; i < kpiListData.length; i++) {\n    let row = kpiListData[i];\n    if (row[kpiNameIndex].toString().trim() === kpiName.trim()) { // Matching KPI Name\n      kpiId = row[kpiIdIndex].toString();\n      locationId = row[locationIdIndex].toString();\n      kpiNameFound = true;\n      break;\n    }\n  }\n\n  if (!kpiNameFound || !kpiId || !locationId) {\n    console.log(`KPI Name '${kpiName}' not found in 'KPI_list' table or missing 'Location ID'.`);\n    throw new Error(`KPI Name '${kpiName}' not found in 'KPI_list' table or missing 'Location ID'.`);\n  }\n\n  // **New Code: Check if the time difference is more than 24 hours**\n  const fromTimeDate = new Date(fromTime);\n  const toTimeDate = new Date(toTime);\n  const timeDiffMs = toTimeDate.getTime() - fromTimeDate.getTime();\n\n  // Reset any previous error message and formatting in 'toTime' cell\n  toTimeRange.getFormat().getFont().setColor(\"black\");\n\n  if (isNaN(fromTimeDate.getTime()) || isNaN(toTimeDate.getTime())) {\n    // Invalid date format\n    let errorMessage = \"Error: Invalid date format in 'fromTime' or 'toTime'. Please use ISO 8601 format.\";\n    if (isNaN(fromTimeDate.getTime())) {\n      errorMessage += \" 'fromTime' is invalid.\";\n    }\n    if (isNaN(toTimeDate.getTime())) {\n      errorMessage += \" 'toTime' is invalid.\";\n    }\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else if (timeDiffMs > 24 * 60 * 60 * 1000) { // 24 hours in milliseconds\n    // Write the error message in the 'toTime' cell in red font\n    const errorMessage = \"Error: The time interval between 'fromTime' and 'toTime' in the HDA Detailed call cannot exceed 24 hours.\";\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    // Stop further execution\n    return; // Exit the script\n  } else if (fromTimeDate > toTimeDate) {\n    // fromTime is after toTime\n    const errorMessage = \"Error: 'fromTime' must be before 'toTime'.\";\n    toTimeRange.setValue(errorMessage);\n    toTimeRange.getFormat().getFont().setColor(\"red\");\n    return;\n  } else {\n    // If the check passes, all is ok \n  }\n\n  // Get or create the \"Detailed Results\" worksheet\n  let detailedSheet = workbook.getWorksheet(\"Detailed Results\");\n  if (!detailedSheet) {\n    detailedSheet = workbook.addWorksheet(\"Detailed Results\");\n  }\n\n  // Clear existing data\n  let usedRange = detailedSheet.getUsedRange();\n  if (usedRange) {\n    usedRange.clear();\n  }\n\n  // Construct the first API URL with the obtained kpiId\n  let apiUrl = `https://api.ptvgroup.tech/hda/v1/kpi/detailed/get?kpiId=${encodeURIComponent(kpiId)}&fromTime=${encodeURIComponent(fromTime)}&toTime=${encodeURIComponent(toTime)}&timeAggregation=${encodeURIComponent(timeAggregation)}`;\n\n  try {\n    console.log(`First API URL: ${apiUrl}`); // Log the API URL\n\n    // Make the first API call\n    let response = await fetch(apiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'apiKey': apiKey,\n        'User-Agent': 'OfficeScript'\n      }\n    });\n\n    if (!response.ok) {\n      console.log(`First API response not OK. Status: ${response.status}`); // Log if the response is not OK\n      logRequest(workbook, apiUrl, `Error: HTTP ${response.status}`);\n      return;\n    }\n\n    console.log(\"First API response OK.\"); // Log if the response is OK\n\n    let data: ApiResponse = await response.json();\n    // console.log(\"First API data:\", data); // Log the data received from the first API\n\n    let dataArray = data.data;\n    console.log(\"Data array length:\", dataArray.length); // Log the length of the data array\n\n    // **Adjust Sorting Order**\n    // Sort the data array by timestamp, then by progressive\n    dataArray.sort((a, b) => {\n      const timeA = new Date(a.timestamp).getTime();\n      const timeB = new Date(b.timestamp).getTime();\n      if (timeA === timeB) {\n        return a.progressive - b.progressive;\n      }\n      return timeA - timeB;\n    });\n\n    // **Use the locationId obtained from the 'KPI_list' table**\n\n    if (!locationId) {\n      logRequest(workbook, 'N/A', `Error: locationId not found for kpiId ${kpiId}`);\n      return;\n    }\n\n    // Construct the second API URL\n    let openLrApiUrl = `https://api.ptvgroup.tech/kpieng/v1/location/by-id?locationId=${encodeURIComponent(locationId)}`;\n    console.log(`Second API URL: ${openLrApiUrl}`); // Log the second API URL\n\n    // Make the second API call\n    let openLrResponse = await fetch(openLrApiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'apiKey': apiKey,\n        'User-Agent': 'OfficeScript'\n      }\n    });\n\n    if (!openLrResponse.ok) {\n      console.log(`Second API response not OK. Status: ${openLrResponse.status}`); // Log if the response is not OK\n      logRequest(workbook, openLrApiUrl, `Error: HTTP ${openLrResponse.status}`);\n      return;\n    }\n\n    console.log(\"Second API response OK.\"); // Log if the response is OK\n\n    let openLrData: OpenLrApiResponse = await openLrResponse.json();\n    console.log(\"Second API data:\", openLrData); // Log the data received from the second API\n    let openLrEntities = openLrData.entities;\n    console.log(\"OpenLr Entities length:\", openLrEntities.length); // Log the length of openLrEntities\n\n    // **Extract the sequence of progressive values for the first timestamp**\n    let firstTimestamp = dataArray[0].timestamp;\n    let progressiveSequence: number[] = dataArray.filter(item => item.timestamp === firstTimestamp)\n      .map(item => item.progressive);\n\n    // **Check if the number of progressives in the sequence matches number of OpenLR codes**\n    if (progressiveSequence.length !== openLrEntities.length) {\n      logRequest(workbook, openLrApiUrl, `Error: Mismatch in number of progressives in sequence (${progressiveSequence.length}) and OpenLR entities (${openLrEntities.length})`);\n      return;\n    }\n\n    // **Build mapping from progressive value to OpenLR code based on their index in the sequence**\n    let progressiveToOpenLrCode: { [key: number]: string } = {};\n    for (let i = 0; i < progressiveSequence.length; i++) {\n      progressiveToOpenLrCode[progressiveSequence[i]] = openLrEntities[i].openLrCode;\n    }\n\n    // Prepare the 2D array to write to the sheet\n    const headersOutput = [\"progressive\", \"timestamp\", \"value(sec)\", \"unusualValue(sec)\", \"averageValue(sec)\", \"speed(km/h)\", \"OpenLR\"];\n    const dataRows = dataArray.map((item, index) => {\n      const rowNum = index + 2; // Row number in Excel (1-based)\n      // Prepare column F as a string formula\n      const speedFormula = `=IF(B${rowNum}<>B${rowNum - 1}, A${rowNum}/(C${rowNum}/3600), (A${rowNum}-A${rowNum - 1})/(C${rowNum}/3600))`;\n      const openLrCode = progressiveToOpenLrCode[item.progressive] || '';\n      return [\n        item.progressive,\n        item.timestamp,\n        item.value * 60.0,\n        item.unusualValue * 60.0,\n        item.averageValue * 60.0,\n        speedFormula,\n        openLrCode\n      ];\n    });\n    const fullData = [headersOutput, ...dataRows];\n\n    // Write all data at once\n    const rowCount = fullData.length;\n    const columnCount = headersOutput.length;\n    let targetRange = detailedSheet.getRangeByIndexes(0, 0, rowCount, columnCount);\n    targetRange.setValues(fullData);\n\n    // Define the range for the table\n    let tableRange = detailedSheet.getRangeByIndexes(0, 0, rowCount, columnCount);\n\n    // Add and name the table\n    let table = detailedSheet.addTable(tableRange, true);\n    table.setName(\"DETAILED_RESULTS\");\n\n    // Auto-fit columns\n    detailedSheet.getUsedRange().getFormat().autofitColumns();\n\n    // Log the success\n    logRequest(workbook, apiUrl, \"Success\");\n  } catch (error) {\n    // Handle any other errors\n    // Optionally, you can write the error message to a cell or log it\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    console.log(\"Error in main function:\", error); // Log the error\n    logRequest(workbook, apiUrl, `Error: ${errorMessage}`);\n  }\n}\n\n/**\n * Logs API request details in a 'Log' worksheet.\n *\n * @param workbook The Excel workbook object.\n * @param requestUrl The request URL with the API key masked.\n * @param status The status or error message.\n */\nfunction logRequest(workbook: ExcelScript.Workbook, requestUrl: string, status: string) {\n  let logSheet = workbook.getWorksheet(\"Log\");\n  if (!logSheet) {\n    logSheet = workbook.addWorksheet(\"Log\");\n  }\n  let logTable = logSheet.getTables().find(table => table.getName() === \"RequestLog\");\n  const headers = [\"Datetime\", \"Request URL\", \"Status\"];\n  if (!logTable) {\n    let headerRange = logSheet.getRange(\"A1:C1\");\n    headerRange.setValues([headers]);\n    logTable = logSheet.addTable(headerRange, true);\n    logTable.setName(\"RequestLog\");\n  }\n  const now = new Date();\n  const timestamp = now.toISOString();\n  let safeUrl = requestUrl.replace(/apiKey=[^&]+/, \"apiKey=****\");\n  logTable.addRow(null, [timestamp, safeUrl, status,\"\"]);\n}\n\n// Interface for the first API response\ninterface ApiResponse {\n  meta: {\n    kpiId: string;\n    minT: string;\n    maxT: string;\n    result_size: number;\n    defaultValue: number;\n    pathLength: number;\n  };\n  data: Array<{\n    progressive: number;\n    timestamp: string;\n    value: number;\n    unusualValue: number;\n    averageValue: number;\n  }>;\n}\n\n// Interface for the second API response\ninterface OpenLrApiResponse {\n  name: string;\n  entities: Array<{\n    strt: number;\n    fsnd: number;\n    openLrCode: string;\n    order: number;\n    startProgressive: number;\n    endProgressive: number;\n  }>;\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Office 365 Script:\\nThis script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\\nIt retrieves the KPI Name from cell A3 of the active worksheet.\\nIt then searches for the corresponding KPI ID and Location ID in the 'KPI_list' table.\\nWith the KPI ID, it constructs API requests to retrieve detailed KPI data and writes the results to the 'Detailed Results' worksheet.\\nAdditionally, it logs the request details in a 'Log' worksheet.\\n\\nIMPORTANT:\\n- Any future modifications to this script should take into account that it's an Office 365 Script.\\n- All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The current workbook.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}