{"version":"0.3.0","body":"/**\n * Office 365 Script:\n * This script now downloads location details only. It retrieves the KPI Name from cell A3,\n * finds the corresponding KPI ID and Location ID from the 'KPI_list' table,\n * makes an API call to download location details, and writes them on a new worksheet called \"Location\".\n * At the top of the worksheet, it writes the KPI name, the location name (from the location API), and the location ID.\n * Below that, it creates a table with the retrieved location details.\n *\n * @param workbook The current workbook.\n */\nasync function main(workbook: ExcelScript.Workbook) {\n  let sheet = workbook.getActiveWorksheet();\n\n  // Read input parameters from the sheet\n  //let apiKey = sheet.getRange(\"B1\").getValue() as string;\n    // Get the Config worksheet\n    let configSheet = workbook.getWorksheet(\"Config\");\n    if (!configSheet) {\n        console.log(\"The 'Config' worksheet was not found.\");\n        throw new Error(\"The 'Config' worksheet was not found.\");\n    }\n\n    const kpiName = configSheet.getRange(\"A3\").getValue() as string;\n    // Read API key from Config sheet\n    const apiKey = configSheet.getRange(\"B1\").getValue()?.toString();\n\n  // Ensure the API key is provided\n  if (!apiKey) {\n    logRequest(workbook, \"https://api.ptvgroup.tech/kpieng/v1/location/by-id\", \"Error: API key missing\");\n    return;\n  }\n\n  // Get kpiId and locationId from the 'KPI_list' table\n  let kpiListTable = workbook.getTable(\"KPI_list\");\n  if (!kpiListTable) {\n    throw new Error(\"The 'KPI_list' table was not found.\");\n  }\n  let tableValues = kpiListTable.getRange().getValues() as (string | number)[][];\n  let headers = tableValues[0] as string[];\n  let kpiListData = tableValues.slice(1);\n\n  let kpiIdIndex = headers.indexOf('KPI ID');\n  let kpiNameIndex = headers.indexOf('KPI Name');\n  let locationIdIndex = headers.indexOf('Location ID');\n  let lengthIndex = headers.indexOf('Km Length');\n\n  if (kpiIdIndex === -1 || kpiNameIndex === -1 || locationIdIndex === -1) {\n    throw new Error(\"Columns 'KPI ID', 'KPI Name', or 'Location ID' not found in 'KPI_list' table.\");\n  }\n\n  let kpiId: string | null = null;\n  let locationId: string | null = null;\n  let length: string | null = null;\n  let kpiNameFound = false;\n\n  for (let i = 0; i < kpiListData.length; i++) {\n    let row = kpiListData[i];\n    if (row[kpiNameIndex].toString().trim() === kpiName.trim()) { // Matching KPI Name\n      kpiId = row[kpiIdIndex].toString();\n      locationId = row[locationIdIndex].toString();\n      length = row[lengthIndex]?.toString() || \"N/A\";\n      kpiNameFound = true;\n      break;\n    }\n  }\n\n  if (!kpiNameFound || !kpiId || !locationId) {\n    throw new Error(`KPI Name '${kpiName}' not found in 'KPI_list' table or missing 'Location ID'.`);\n  }\n\n  // Construct the second API URL for location details using the locationId\n  let openLrApiUrl = `https://api.ptvgroup.tech/kpieng/v1/location/by-id?locationId=${encodeURIComponent(locationId)}`;\n\n  try {\n    // Make the API call to get location details\n    let openLrResponse = await fetch(openLrApiUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'apiKey': apiKey,\n        'User-Agent': 'OfficeScript'\n      }\n    });\n\n    if (!openLrResponse.ok) {\n      logRequest(workbook, openLrApiUrl, `Error: HTTP ${openLrResponse.status}`);\n      return;\n    }\n\n    let openLrData: OpenLrApiResponse = await openLrResponse.json();\n\n    // Remove existing \"Location\" worksheet if it exists using the worksheet.delete() method\n    let existingSheet = workbook.getWorksheet(\"Location\");\n    if (existingSheet) {\n      existingSheet.delete();\n    }\n\n    // Create a new \"Location\" worksheet\n    let locationSheet = workbook.addWorksheet(\"Location\");\n\n    // Write KPI and location header details at the top:\n    // Row 1: KPI Name, Row 2: Location Name, Row 3: Location ID\n    locationSheet.getRange(\"A1\").setValue(`KPI Name: ${kpiName}`);\n    locationSheet.getRange(\"A2\").setValue(`Location Name: ${openLrData.name}`);\n    locationSheet.getRange(\"A3\").setValue(`Location ID: ${locationId}`);\n\n    // Add length information to the sheet\n    locationSheet.getRange(\"A4\").setValue(`Length: ${length}`);\n    locationSheet.getRange(\"B4\").setValue(`km`);\n\n    // Prepare table header and details for location entities starting row 5\n    const tableHeaders = [\"strt\", \"fsnd\", \"openLrCode\", \"order\", \"startProgressive\", \"endProgressive\"];\n    let entities = openLrData.entities;\n    let tableData: (string | number)[][] = [];\n    tableData.push(tableHeaders);\n\n    // Populate table rows from each entity\n    entities.forEach(entity => {\n      tableData.push([\n        entity.strt,\n        entity.fsnd,\n        entity.openLrCode,\n        entity.order,\n        entity.startProgressive,\n        entity.endProgressive\n      ]);\n    });\n\n    // Determine table dimensions and get target range starting at A5\n    const rowCount = tableData.length;\n    const columnCount = tableHeaders.length;\n    let targetRange = locationSheet.getRangeByIndexes(4, 0, rowCount, columnCount);\n    targetRange.setValues(tableData);\n\n    // Optionally, add a table to the written range and name it \"location\"\n    let locationTable = locationSheet.addTable(targetRange, true);\n    locationTable.setName(\"location\");\n\n    // Auto-fit columns\n    locationSheet.getUsedRange()?.getFormat().autofitColumns();\n\n    logRequest(workbook, openLrApiUrl, \"Success\");\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, openLrApiUrl, `Error: ${errorMessage}`);\n  }\n}\n\n/**\n * Logs API request details in a 'Log' worksheet.\n *\n * @param workbook The Excel workbook object.\n * @param requestUrl The request URL with the API key masked.\n * @param status The status or error message.\n */\nfunction logRequest(workbook: ExcelScript.Workbook, requestUrl: string, status: string) {\n  let logSheet = workbook.getWorksheet(\"Log\");\n  if (!logSheet) {\n    logSheet = workbook.addWorksheet(\"Log\");\n  }\n  let logTable = logSheet.getTables().find(table => table.getName() === \"RequestLog\");\n  const headers = [\"Datetime\", \"Request URL\", \"Status\"];\n  if (!logTable) {\n    let headerRange = logSheet.getRange(\"A1:C1\");\n    headerRange.setValues([headers]);\n    logTable = logSheet.addTable(headerRange, true);\n    logTable.setName(\"RequestLog\");\n  }\n  const now = new Date();\n  const timestamp = now.toISOString();\n  let safeUrl = requestUrl.replace(/apiKey=[^&]+/, \"apiKey=****\");\n  logTable.addRow(null, [timestamp, safeUrl, status,\"\"]);\n}\n\n// Interface for the second API response\ninterface OpenLrApiResponse {\n  name: string;\n  entities: Array<{\n    strt: number;\n    fsnd: number;\n    openLrCode: string;\n    order: number;\n    startProgressive: number;\n    endProgressive: number;\n  }>;\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Office 365 Script:\\nThis script now downloads location details only. It retrieves the KPI Name from cell A3,\\nfinds the corresponding KPI ID and Location ID from the 'KPI_list' table,\\nmakes an API call to download location details, and writes them on a new worksheet called \\\"Location\\\".\\nAt the top of the worksheet, it writes the KPI name, the location name (from the location API), and the location ID.\\nBelow that, it creates a table with the retrieved location details.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The current workbook.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}