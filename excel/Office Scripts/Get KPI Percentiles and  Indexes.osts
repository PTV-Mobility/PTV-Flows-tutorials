{"version":"0.3.0","body":"/**\n * This Office Script processes KPI data from an Excel workbook to prepare it for analysis.\n * \n * **Note to future developers and AI language models (LLMs):**\n * - **Please do not remove this comment.** It provides essential context for understanding and modifying the code.\n * - If changes are made to the function, update this comment to accurately reflect those changes.\n * - This ensures that anyone reviewing or updating the script has the necessary background and information.\n * \n * **Context:**\n * - The script reads data from a worksheet named **\"Overall KPI Results\"**.\n * - The data includes timestamped KPI measurements.\n * \n * **Expected Input:**\n * - A worksheet named **\"Overall KPI Results\"** containing at least the following columns:\n *   - **\"timestamp\"**: Date and time of the KPI measurement. Should be in a format recognized by JavaScript's `Date` object (e.g., ISO 8601 format like \"2025-01-17T00:00:00Z\").\n *   - **\"value (min)\"**: The KPI value measured at the given timestamp.\n * - The headers should be in the first row of the worksheet.\n * \n * **Process Overview:**\n * 1. **Data Augmentation:**\n *    - Adds two new columns to the data:\n *      - **\"Type of Day\"**: The day of the week (e.g., \"Monday\", \"Tuesday\") based on the timestamp.\n *      - **\"Hour of Day\"**: Extracts the hour (0-23) from the timestamp.\n *    - The augmented data is written to a new worksheet named **\"DataForPivot\"**.\n * 2. **Pivot Table Creation:**\n *    - Creates new worksheets for pivot tables:\n *      - **\"PivotTable\"**: Contains a pivot table with average KPI values.\n *      - **\"PercentilePivotTable\"**: Contains a pivot table with selected percentiles.\n *    - Sets up the pivot tables with:\n *      - **Rows**: \"Type of Day\" and \"Hour of Day\".\n *      - **Columns**: For the percentile pivot table, \"Percentile\".\n *      - **Values**: \"value (min)\" summarized by the average, and later \"Value\" for percentiles.\n * 3. **Percentile Calculation:**\n *    - Calculates percentiles for the KPI values grouped by \"Type of Day\" and \"Hour of Day\".\n *    - Percentiles are calculated from 0% to 100% in 5% increments.\n *    - The results are written to a new worksheet named **\"Percentiles\"**.\n * 4. **Filtering the Pivot Table:**\n *    - For the percentile pivot table, the script filters the \"Percentile\" column so that only the items \"5\", \"85\", and \"95\" are visible.\n *    - This is done using the applyFilter method with a manualFilter.\n * \n * **Expected Output:**\n * - **\"DataForPivot\"** worksheet containing the augmented data.\n * - **\"PivotTable\"** worksheet containing the pivot table for average KPI values.\n * - **\"Percentiles\"** worksheet containing the percentile calculations.\n * - **\"PercentilePivotTable\"** worksheet containing the pivot table for selected percentiles.\n */\nasync function main(workbook: ExcelScript.Workbook) {\n    // Get the \"Overall KPI Results\" worksheet.\n    let overallSheet = workbook.getWorksheet(\"Overall KPI Results\");\n    if (!overallSheet) {\n        throw new Error(\"The 'Overall KPI Results' worksheet was not found.\");\n    }\n\n    // Read data from the worksheet.\n    let usedRange = overallSheet.getUsedRange();\n    if (!usedRange) {\n        throw new Error(\"No data found in 'Overall KPI Results' worksheet.\");\n    }\n    let dataValues = usedRange.getValues();\n\n    // Get current headers and check required columns\n    let headers: string[] = dataValues[0].map(cell => String(cell));\n    let timestampColIndex = headers.indexOf(\"timestamp\");\n    let valueColIndex = headers.indexOf(\"value (min)\");\n    if (timestampColIndex === -1 || valueColIndex === -1) {\n        throw new Error(\"Required columns 'timestamp' and 'value (min)' not found in 'Overall KPI Results' worksheet.\");\n    }\n\n    // Add new columns if they don't exist\n    let typeOfDayColIndex = headers.indexOf(\"Type of Day\");\n    let hourOfDayColIndex = headers.indexOf(\"Hour of Day\");\n    const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    if (typeOfDayColIndex === -1 || hourOfDayColIndex === -1) {\n        // Add new columns\n        headers.push(\"Type of Day\", \"Hour of Day\");\n        typeOfDayColIndex = headers.length - 2;\n        hourOfDayColIndex = headers.length - 1;\n\n        // Update each row with the new calculated columns\n        for (let i = 1; i < dataValues.length; i++) {\n            let row = dataValues[i];\n            let timestampStr = String(row[timestampColIndex]);\n            let timestampDate = new Date(timestampStr);\n            let typeOfDay = dayNames[timestampDate.getUTCDay()];\n            let hourOfDay = timestampDate.getUTCHours();\n\n            row.push(typeOfDay, hourOfDay);\n        }\n\n        // Write the updated data back to the worksheet\n        const newRange = overallSheet.getRangeByIndexes(\n            0, 0, dataValues.length, headers.length\n        );\n        dataValues[0] = headers; // Update first row with new headers\n        newRange.setValues(dataValues);\n\n        // Auto-fit the new columns\n        overallSheet.getUsedRange().getFormat().autofitColumns();\n    }\n\n    // Create table if it doesn't exist or update existing one\n    let tableName = \"OverallKPIResults\";\n    let table = overallSheet.getTables()[0] ||\n        overallSheet.addTable(overallSheet.getUsedRange(), true);\n    table.setName(tableName);\n\n    // Create or recreate the \"PivotTable\" worksheet.\n    let pivotSheetName = \"AverageByWeekDayByHour\";\n    let pivotSheet = workbook.getWorksheet(pivotSheetName);\n    if (pivotSheet) {\n        pivotSheet.delete();\n    }\n    pivotSheet = workbook.addWorksheet(pivotSheetName);\n\n    // Add a pivot table for average KPI values.\n    let pivotTableName = \"AnalysisPivotTable\";\n    let pivotTable = workbook.addPivotTable(pivotTableName, table, pivotSheet.getRange(\"A3\"));\n\n    // Set up the pivot table fields: add 'Type of Day' and 'Hour of Day' to rows.\n    pivotTable.addRowHierarchy(pivotTable.getHierarchy(\"Type of Day\"));\n    pivotTable.addRowHierarchy(pivotTable.getHierarchy(\"Hour of Day\"));\n\n    // Add 'value (min)' to Values, set to average.\n    let valueField = pivotTable.addDataHierarchy(pivotTable.getHierarchy(\"value (min)\"));\n    valueField.setSummarizeBy(ExcelScript.AggregationFunction.average);\n\n    // Compute percentiles manually.\n    let typeOfDaySet = new Set<string>();\n    let hoursOfDaySet = new Set<number>();\n    dataValues.slice(1).forEach((row) => {\n        let typeOfDay = String(row[typeOfDayColIndex]);\n        let hourOfDay = Number(row[hourOfDayColIndex]);\n        typeOfDaySet.add(typeOfDay);\n        hoursOfDaySet.add(hourOfDay);\n    });\n\n    const dayOrder: { [key: string]: number } = {\n        \"Sunday\": 0,\n        \"Monday\": 1,\n        \"Tuesday\": 2,\n        \"Wednesday\": 3,\n        \"Thursday\": 4,\n        \"Friday\": 5,\n        \"Saturday\": 6\n    };\n\n    let typeOfDays = Array.from(typeOfDaySet).sort((a, b) => dayOrder[a] - dayOrder[b]);\n    let hoursOfDay = Array.from(hoursOfDaySet).sort((a, b) => a - b);\n\n    // Create a new worksheet for percentiles.\n    let percentileSheetName = \"Percentiles\";\n    let percentileSheet = workbook.getWorksheet(percentileSheetName);\n    if (percentileSheet) {\n        percentileSheet.delete();\n    }\n    percentileSheet = workbook.addWorksheet(percentileSheetName);\n\n    // Prepare headers for percentile data.\n    let percentileHeaders = [\"Type of Day\", \"Hour of Day\", \"Percentile\", \"Value\"];\n    let percentileData: (string | number)[][] = [percentileHeaders];\n    // Create an array of percentiles from 0 to 100 in 5% increments.\n    let percentiles: number[] = Array.from({ length: 21 }, (_, i) => i * 5);\n\n    // Map to store average values for each type/hour combination\n    let avgByTypeAndHour = new Map<string, number>();\n\n    // Compute percentiles and averages for each combination.\n    for (let type of typeOfDays) {\n        for (let hour of hoursOfDay) {\n            let filteredValues: number[] = dataValues.slice(1)\n                .filter(row =>\n                    String(row[typeOfDayColIndex]) === type &&\n                    Number(row[hourOfDayColIndex]) === hour\n                )\n                .map(row => Number(row[valueColIndex]));\n\n            if (filteredValues.length > 0) {\n                // Calculate average for this specific type/hour combination\n                const avgValue = filteredValues.reduce((sum, val) => sum + val, 0) / filteredValues.length;\n\n                // Sort for percentile calculation\n                filteredValues.sort((a, b) => a - b);\n\n                // Store both percentiles and average for later use\n                for (let p of percentiles) {\n                    let percentileValue = computePercentile(filteredValues, p / 100);\n                    percentileData.push([type, hour, p, percentileValue]);\n                }\n\n                // Add average to a map for later use in KPI Indexes\n                avgByTypeAndHour.set(`${type}_${hour}`, avgValue);\n            }\n        }\n    }\n\n    // Write the percentile data to the \"Percentiles\" worksheet.\n    let percentileRowCount = percentileData.length;\n    let percentileColCount = percentileData[0].length;\n    let percentileTargetRange = percentileSheet.getRangeByIndexes(0, 0, percentileRowCount, percentileColCount);\n    percentileTargetRange.setValues(percentileData);\n\n    // Create or recreate the \"PercentilePivotTable\" worksheet.\n    let percentilePivotSheetName = \"PercentilePivotTable\";\n    let percentilePivotSheet = workbook.getWorksheet(percentilePivotSheetName);\n    if (percentilePivotSheet) {\n        percentilePivotSheet.delete();\n    }\n    percentilePivotSheet = workbook.addWorksheet(percentilePivotSheetName);\n\n    // Create a table for the percentile data.\n    let percentileDataSheet = percentileSheet;\n    let percentileUsedRange = percentileDataSheet.getUsedRange();\n    let percentileDataTable = percentileDataSheet.getTables().length > 0 ?\n        percentileDataSheet.getTables()[0] :\n        percentileDataSheet.addTable(percentileUsedRange, true);\n    percentileDataTable.setName(\"PercentileDataTable\");\n\n    // Add a pivot table for percentiles.\n    let percentilePivotTableName = \"PercentilesPivotTable\";\n    let percentilePivotTable = workbook.addPivotTable(percentilePivotTableName, percentileDataTable, percentilePivotSheet.getRange(\"A3\"));\n\n    // Set up the pivot table fields for percentiles.\n    percentilePivotTable.addRowHierarchy(percentilePivotTable.getHierarchy(\"Type of Day\"));\n    percentilePivotTable.addRowHierarchy(percentilePivotTable.getHierarchy(\"Hour of Day\"));\n    percentilePivotTable.addColumnHierarchy(percentilePivotTable.getHierarchy(\"Percentile\"));\n    let percentileValueField = percentilePivotTable.addDataHierarchy(percentilePivotTable.getHierarchy(\"Value\"));\n    percentileValueField.setNumberFormat(\"#,##0.00\");\n\n    // Filter the 'Percentile' field to show only \"5\", \"85\", and \"95\" using the applyFilter method with manualFilter.\n    let percentileField: ExcelScript.PivotHierarchy = percentilePivotTable.getColumnHierarchies()[0];\n    let pivotFields: ExcelScript.PivotField[] = percentileField.getFields();\n    if (pivotFields.length > 0) {\n        let pivotField = pivotFields[0];\n        pivotField.applyFilter({\n            manualFilter: {\n                selectedItems: [\"5\", \"85\", \"95\"]\n            }\n        });\n    }\n\n    // Auto-fit columns on all worksheets.\n    overallSheet.getUsedRange().getFormat().autofitColumns();\n    percentileSheet.getUsedRange().getFormat().autofitColumns();\n    pivotSheet.getUsedRange().getFormat().autofitColumns();\n    percentilePivotSheet.getUsedRange().getFormat().autofitColumns();\n\n    // Create KPI Indexes worksheet\n    let indexesSheetName = \"KPI Indexes\";\n    let indexesSheet = workbook.getWorksheet(indexesSheetName);\n    if (indexesSheet) {\n        indexesSheet.delete();\n    }\n    indexesSheet = workbook.addWorksheet(indexesSheetName);\n\n    // Calculate free flow time (minimum 5th percentile across all data)\n    const freeFlowTime = Math.min(...percentileData\n        .filter(row => row[2] === 5) // Filter for 5th percentile\n        .map(row => row[3] as number)); // Get the value\n\n    // Prepare headers for the indexes table\n    const indexHeaders = [\n        \"Type of Day\",\n        \"Hour of Day\",\n        \"5th Percentile\",\n        \"Average\",\n        \"95th Percentile\",\n        \"Free Flow Time\",\n        \"TTI (Travel Time Index)\",\n        \"BI (Buffer Index)\",\n        \"PTI (Planning Time Index)\"\n    ];\n\n    // Prepare data rows\n    const indexData: (string | number)[][] = [indexHeaders];\n\n    // Combine data from percentile calculations for KPI Indexes\n    for (let type of typeOfDays) {\n        for (let hour of hoursOfDay) {\n            // Get values from percentile data\n            const percentile5 = percentileData.find(row =>\n                row[0] === type && row[1] === hour && row[2] === 5)?.[3] as number;\n            const percentile95 = percentileData.find(row =>\n                row[0] === type && row[1] === hour && row[2] === 95)?.[3] as number;\n\n            // Get average from our pre-calculated map\n            const avgValue = avgByTypeAndHour.get(`${type}_${hour}`);\n\n            // Push the base values, the indexes will be calculated with formulas\n            indexData.push([\n                type,\n                hour,\n                percentile5,\n                avgValue,\n                percentile95,\n                freeFlowTime,\n                \"\", // TTI will be calculated with formula\n                \"\", // BI will be calculated with formula\n                \"\"  // PTI will be calculated with formula\n            ]);\n        }\n    }\n\n    // Write data to the worksheet\n    const indexRange = indexesSheet.getRangeByIndexes(\n        0, 0, indexData.length, indexHeaders.length\n    );\n    indexRange.setValues(indexData);\n\n    // Create table\n    const indexTable = indexesSheet.addTable(indexRange, true);\n    indexTable.setName(\"Indexes\");\n\n    // Add formulas for the index calculations\n    const ttiColumn = indexHeaders.findIndex(h => h.includes(\"TTI\"));\n    const biColumn = indexHeaders.findIndex(h => h.includes(\"Buffer Index\"));\n    const ptiColumn = indexHeaders.findIndex(h => h.includes(\"PTI\"));\n\n    // For each data row, add the formulas\n    for (let row = 1; row < indexData.length; row++) {\n        // TTI = Average / Free Flow Time\n        indexesSheet.getCell(row, ttiColumn).setFormula(\n            `=D${row + 1}/F${row + 1}`\n        );\n\n        // BI = ((95th percentile - Average) / Average) * 100\n        indexesSheet.getCell(row, biColumn).setFormula(\n            `=(E${row + 1}-D${row + 1})/D${row + 1}`\n        );\n\n        // PTI = 95th percentile / Free Flow Time\n        indexesSheet.getCell(row, ptiColumn).setFormula(\n            `=E${row + 1}/F${row + 1}`\n        );\n    }\n\n    // Format numbers for numeric columns\n    for (let i = 2; i < indexHeaders.length; i++) { // Start from column 2 (skip Type of Day and Hour)\n        const columnRange = indexesSheet.getRangeByIndexes(\n            1,                          // Start from row 1 (skip header)\n            i,                          // Current column\n            indexData.length - 1,       // Number of data rows\n            1                          // One column at a time\n        );\n\n        // Use setNumberFormat directly on the Range object\n        if (indexHeaders[i].includes(\"Buffer Index\")) {\n            columnRange.setNumberFormat(\"#,##0.00%\");\n        } else {\n            columnRange.setNumberFormat(\"#,##0.00\");\n        }\n    }\n\n    // Auto-fit columns\n    indexesSheet.getUsedRange().getFormat().autofitColumns();\n\n    // Activate the indexes sheet instead of percentile pivot\n    indexesSheet.activate();\n}\n\n// Function to compute a percentile from an array of numbers for a given percentile (0 to 1).\nfunction computePercentile(values: number[], percentile: number): number {\n    if (values.length === 0) return NaN;\n    if (percentile <= 0) return values[0];\n    if (percentile >= 1) return values[values.length - 1];\n    let index = (values.length - 1) * percentile;\n    let lower = Math.floor(index);\n    let upper = lower + 1;\n    let weight = index % 1;\n    if (upper >= values.length) return values[lower];\n    return values[lower] * (1 - weight) + values[upper] * weight;\n}\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"This Office Script processes KPI data from an Excel workbook to prepare it for analysis.\\n\\n**Note to future developers and AI language models (LLMs):**\\n- **Please do not remove this comment.** It provides essential context for understanding and modifying the code.\\n- If changes are made to the function, update this comment to accurately reflect those changes.\\n- This ensures that anyone reviewing or updating the script has the necessary background and information.\\n\\n**Context:**\\n- The script reads data from a worksheet named **\\\"Overall KPI Results\\\"**.\\n- The data includes timestamped KPI measurements.\\n\\n**Expected Input:**\\n- A worksheet named **\\\"Overall KPI Results\\\"** containing at least the following columns:\\n   - **\\\"timestamp\\\"**: Date and time of the KPI measurement. Should be in a format recognized by JavaScript's `Date` object (e.g., ISO 8601 format like \\\"2025-01-17T00:00:00Z\\\").\\n   - **\\\"value (min)\\\"**: The KPI value measured at the given timestamp.\\n- The headers should be in the first row of the worksheet.\\n\\n**Process Overview:**\\n1. **Data Augmentation:**\\n    - Adds two new columns to the data:\\n      - **\\\"Type of Day\\\"**: The day of the week (e.g., \\\"Monday\\\", \\\"Tuesday\\\") based on the timestamp.\\n      - **\\\"Hour of Day\\\"**: Extracts the hour (0-23) from the timestamp.\\n    - The augmented data is written to a new worksheet named **\\\"DataForPivot\\\"**.\\n2. **Pivot Table Creation:**\\n    - Creates new worksheets for pivot tables:\\n      - **\\\"PivotTable\\\"**: Contains a pivot table with average KPI values.\\n      - **\\\"PercentilePivotTable\\\"**: Contains a pivot table with selected percentiles.\\n    - Sets up the pivot tables with:\\n      - **Rows**: \\\"Type of Day\\\" and \\\"Hour of Day\\\".\\n      - **Columns**: For the percentile pivot table, \\\"Percentile\\\".\\n      - **Values**: \\\"value (min)\\\" summarized by the average, and later \\\"Value\\\" for percentiles.\\n3. **Percentile Calculation:**\\n    - Calculates percentiles for the KPI values grouped by \\\"Type of Day\\\" and \\\"Hour of Day\\\".\\n    - Percentiles are calculated from 0% to 100% in 5% increments.\\n    - The results are written to a new worksheet named **\\\"Percentiles\\\"**.\\n4. **Filtering the Pivot Table:**\\n    - For the percentile pivot table, the script filters the \\\"Percentile\\\" column so that only the items \\\"5\\\", \\\"85\\\", and \\\"95\\\" are visible.\\n    - This is done using the applyFilter method with a manualFilter.\\n\\n**Expected Output:**\\n- **\\\"DataForPivot\\\"** worksheet containing the augmented data.\\n- **\\\"PivotTable\\\"** worksheet containing the pivot table for average KPI values.\\n- **\\\"Percentiles\\\"** worksheet containing the percentile calculations.\\n- **\\\"PercentilePivotTable\\\"** worksheet containing the pivot table for selected percentiles.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}