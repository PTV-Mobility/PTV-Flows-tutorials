{"version":"0.3.0","body":"/**\n * Represents the location data within a KPI item.\n */\ninterface Location {\n  name: string;\n  locationId: string;\n}\n\n/**\n * Represents an item returned from the KPI API.\n */\ninterface KPIItem {\n  name: string;\n  kpiId: string;\n  location: Location; // Added location attribute\n}\n\ninterface ResultItem {\n  value: number;\n  defaultValue: number;\n  unusualValue: number;\n  averageValue: number;\n  progressive: number;\n}\n\ninterface KPIResult {\n  kpiId: string;\n  timeStamp: string;\n  results: ResultItem[];\n  overallResult: ResultItem;\n}\n\ninterface LengthRequestBody {\n  kpiIds: string[];\n  fromTime: string;\n  toTime: string;\n}\n\n/**\n * Office 365 Script:\n * This script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\n * It retrieves the API key from cell B1, makes an HTTP GET call to the KPI API endpoint,\n * parses the JSON response, and writes the KPI ID, KPI name, Location Name, and Location ID\n * for each object into a table called 'KPI_list'.\n * Additionally, it logs the request details in a 'Log' worksheet.\n *\n * IMPORTANT:\n * - Any future modifications to this script should take into account that it's an Office 365 Script.\n * - All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\n *\n * @param workbook The current workbook.\n */\nasync function main(workbook: ExcelScript.Workbook) {\n  // Get the Config worksheet\n  let configSheet = workbook.getWorksheet(\"Config\");\n  if (!configSheet) {\n    throw new Error(\"The 'Config' worksheet was not found.\");\n  }\n\n  // Read API key from Config sheet\n  const apiKey = configSheet.getRange(\"B1\").getValue()?.toString();\n  if (!apiKey) {\n    logRequest(workbook, \"https://api.ptvgroup.tech/kpieng/v1/instance/all\", \"Error: API key missing\", \"\");\n    return;\n  }\n\n  // The API endpoint URL.\n  const url = \"https://api.ptvgroup.tech/kpieng/v1/instance/all\";\n\n  // Set up the request options with the API key in the header.\n  const options: RequestInit = {\n    method: \"GET\",\n    headers: {\n      \"apiKey\": apiKey,\n      \"Accept\": \"application/json\"\n    }\n  };\n\n  try {\n    // Log request details\n    console.log('GET Request:', {\n      url: url,\n      method: options.method,\n      headers: options.headers\n    });\n\n    // Make the HTTP GET request.\n    let response = await fetch(url, options);\n\n    // Check if the response is OK.\n    if (!response.ok) {\n      logRequest(workbook, url, `Error: HTTP ${response.status}`, \"\");\n      return;\n    }\n\n    const responseText = await response.text();\n    let jsonData = JSON.parse(responseText) as KPIItem[];\n\n    // Log successful KPI list retrieval with response body\n    logRequest(workbook, url, `Success: Retrieved ${jsonData.length} KPIs`, responseText);\n\n    // Ensure the response is valid and contains data.\n    if (!Array.isArray(jsonData) || jsonData.length === 0) {\n      logRequest(workbook, url, \"No data returned from API.\", \"\");\n      return;\n    }\n\n    // Get or create the 'KPI_list' table in the worksheet.\n    let kpiTable = getOrCreateKPITable(workbook, configSheet);\n\n    // Clear existing data in the table (but keep headers).\n    clearTableData(kpiTable);\n\n    // Get length information for all KPIs\n    const kpiIds = jsonData.map(item => item.kpiId);\n    const lengthMap = await getLength(workbook, apiKey, kpiIds);\n\n    // Read the value from cell E18 in the Config sheet\n    const supervisorId = configSheet.getRange(\"E18\").getValue()?.toString();\n\n    // Prepare the data to write: for each object, get [kpiId, name, location.name, location.locationId, length].\n    let tableData: (string | number)[][] = jsonData.map((item: KPIItem) => {\n      const kpiId = item.kpiId;\n      const length = lengthMap.get(kpiId) ?? \"N/A\";\n\n      return [\n        kpiId,\n        item.name,\n        item.location?.name || \"N/A\",\n        item.location?.locationId || \"N/A\",\n        length\n      ];\n    });\n\n    // Add the new data to the table.\n    if (tableData.length > 0) {\n      let cleanedData: (string | number)[][] = tableData.map(row => {\n        const kpiId = row[0].toString();\n        const kpiName = row[1].toString().trim();\n\n        return [\n          kpiId,                      // KPI ID\n          kpiName,                    // KPI Name\n          row[2].toString().trim(),   // Location Name\n          row[3].toString().trim(),   // Location ID\n          row[4].toString().trim(),   // Length (km)\n          `=IF(ISBLANK($E$18), \"add subscription id to have the KPI link\", HYPERLINK(\"https://ptvgroup.tech/flows/subscription/\"&$E$18&\"/supervisor/?kpiId=\"&[@[KPI ID]], \"Go to \"&[@[KPI Name]]))`  // KPI URL\n        ];\n      });\n\n      // Add rows one by one to ensure proper insertion\n      cleanedData.forEach(row => {\n        try {\n          kpiTable.addRow(-1, row);\n        } catch (error) {\n          logRequest(workbook, url, `Error adding row: ${error}`, \"\");\n        }\n      });\n\n      logRequest(workbook, url, `Success: Added ${cleanedData.length} rows to KPI_list table`, \"\");\n    } else {\n      logRequest(workbook, url, \"No valid data to insert.\", \"\");\n    }\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, url, `Error: ${errorMessage}`, \"\");\n  }\n}\n\n/**\n * Retrieves or creates the 'KPI_list' table in the specified worksheet.\n * This function ensures that the table exists before attempting to write data to it.\n * \n * IMPORTANT:\n * - This function is part of an Office 365 Script and utilizes ExcelScript APIs.\n * - Future modifications should consider compatibility with Office Scripts.\n *\n * @param workbook The Excel workbook object.\n * @param worksheet The worksheet where the table should be located.\n * @returns The 'KPI_list' table.\n */\nfunction getOrCreateKPITable(workbook: ExcelScript.Workbook, worksheet: ExcelScript.Worksheet): ExcelScript.Table {\n  // Try to get the table by name.\n  let kpiTable = workbook.getTable(\"KPI_list\");\n  if (kpiTable) {\n    return kpiTable;\n  }\n\n  // Define headers for the KPI table.\n  const headers: string[] = [\"KPI ID\", \"KPI Name\", \"Location Name\", \"Location ID\", \"Length (km)\", \"KPI URL\"];\n\n  // Define the starting cell for the table in Config sheet\n  const startCellAddress = \"A20\";\n  let configSheet = workbook.getWorksheet(\"Config\");\n\n  // Set headers in the worksheet.\n  let headerRange = configSheet.getRange(startCellAddress).getResizedRange(0, headers.length - 1);\n  headerRange.setValues([headers]);\n\n  // Create the table based on the header range.\n  kpiTable = configSheet.addTable(headerRange, true);\n  kpiTable.setName(\"KPI_list\");\n\n  return kpiTable;\n}\n\n/**\n * Clears data in the given table while preserving the headers.\n * This is useful to refresh the data without altering the table structure.\n * \n * @param table The table to clear.\n */\nfunction clearTableData(table: ExcelScript.Table): void {\n  // Get the total number of rows in the table.\n  let totalRowCount = table.getRowCount();\n\n  // If there are data rows present (excluding the header row).\n  if (totalRowCount > 1) {\n    // Calculate the number of data rows (excluding header and total rows).\n    let dataRowCount = totalRowCount - 1; // Assuming there's no total row.\n\n    // Delete all data rows starting from index 0 (the first data row).\n    table.deleteRowsAt(0, dataRowCount);\n  }\n}\n\n/**\n * Logs API request details in a 'Log' worksheet.\n * The log includes a timestamp, the request URL (with the API key masked), and the status.\n * \n * IMPORTANT:\n * - This function is designed for Office 365 Scripts and uses ExcelScript APIs.\n * - Comments are kept to aid future developers and LLMs in understanding the context.\n *\n * @param workbook The Excel workbook object.\n * @param requestUrl The request URL with API key hidden.\n * @param status The status or error message.\n * @param responseBody The response body from the API request.\n */\nfunction logRequest(workbook: ExcelScript.Workbook, requestUrl: string, status: string, responseBody: string) {\n  // Get or create the \"Log\" worksheet.\n  let logSheet = workbook.getWorksheet(\"Log\");\n  if (!logSheet) {\n    logSheet = workbook.addWorksheet(\"Log\");\n  }\n\n  // Try to get the existing log table.\n  let logTable = logSheet.getTables().find(table => table.getName() === \"RequestLog\");\n\n  // Define headers for the log table.\n  const headers: string[] = [\"Datetime\", \"Request URL\", \"Status\", \"Response Body\"];\n\n  // If the table does not exist, create it.\n  if (!logTable) {\n    let headerRange = logSheet.getRange(\"A1:D1\");\n    headerRange.setValues([headers]);\n    logTable = logSheet.addTable(headerRange, true);\n    logTable.setName(\"RequestLog\");\n  }\n\n  // Get the current datetime.\n  const now = new Date();\n  const timestamp = now.toISOString(); // Format: YYYY-MM-DDTHH:mm:ss.sssZ\n\n  // Mask API key from the request URL.\n  let safeUrl = requestUrl.replace(/apiKey=[^&]+/, \"apiKey=****\");\n\n  // Truncate response body to 5000 characters\n  const truncatedBody = responseBody.length > 5000\n    ? responseBody.substring(0, 5000) + \"...\"\n    : responseBody;\n\n  // Append new log entry.\n  logTable.addRow(-1, [timestamp, safeUrl, status, truncatedBody]);\n}\n\n/**\n * Retrieves the length information for the given KPI IDs.\n * Makes a POST request to the KPI API endpoint to get the progressive values.\n * \n * @param workbook The Excel workbook object.\n * @param apiKey The API key for authentication.\n * @param kpiIds Array of KPI IDs to fetch length information for.\n * @returns A Map of KPI IDs to their length values in kilometers.\n */\nasync function getLength(workbook: ExcelScript.Workbook, apiKey: string, kpiIds: string[]): Promise<Map<string, number>> {\n  const url = \"https://api.ptvgroup.tech/kpieng/v1/result/by-kpi-ids\";\n  const now = new Date();\n  const tenMinutesAgo = new Date(now.getTime() - 10 * 60000);\n\n  const requestBody: LengthRequestBody = {\n    kpiIds: kpiIds,\n    fromTime: tenMinutesAgo.toISOString(),\n    toTime: now.toISOString()\n  };\n\n  const options: RequestInit = {\n    method: \"POST\",\n    headers: {\n      \"apiKey\": apiKey,\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    body: JSON.stringify(requestBody)\n  };\n\n  try {\n    // Log request details\n    console.log('POST Request:', {\n      url: url,\n      method: options.method,\n      headers: options.headers,\n      body: requestBody\n    });\n\n    const response = await fetch(url, options);\n    if (!response.ok) {\n      logRequest(workbook, url, `Error: HTTP ${response.status}`, \"\");\n      return new Map();\n    }\n\n    const responseText = await response.text();\n    const data = JSON.parse(responseText) as KPIResult[];\n    logRequest(workbook, url, `Success: Retrieved length data for ${data.length} KPIs`, responseText);\n\n    const lengthMap = new Map<string, number>();\n    const uniqueKpiIds = new Set<string>();\n\n    // Get the latest length value for each KPI\n    data.forEach(result => {\n      if (result.overallResult?.progressive) {\n        const kpiId = result.kpiId;\n        if (!uniqueKpiIds.has(kpiId)) {\n          lengthMap.set(kpiId, result.overallResult.progressive);\n          uniqueKpiIds.add(kpiId);\n        }\n      }\n    });\n\n    return lengthMap;\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, url, `Error: ${errorMessage}`, \"\");\n    return new Map();\n  }\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Office 365 Script:\\nThis script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\\nIt retrieves the API key from cell B1, makes an HTTP GET call to the KPI API endpoint,\\nparses the JSON response, and writes the KPI ID, KPI name, Location Name, and Location ID\\nfor each object into a table called 'KPI_list'.\\nAdditionally, it logs the request details in a 'Log' worksheet.\\n\\nIMPORTANT:\\n- Any future modifications to this script should take into account that it's an Office 365 Script.\\n- All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The current workbook.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}