{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\n    // Get the active worksheet\n    const sheet: ExcelScript.Worksheet = workbook.getActiveWorksheet();\n\n    // Get input coordinates from cells A2 and B2\n    const point1Value: string = sheet.getRange(\"A2\").getValue() as string;\n    const point2Value: string = sheet.getRange(\"B2\").getValue() as string;\n    const mapbox_token: string = sheet.getRange(\"A1\").getValue() as string;\n\n    // Validate input format (coordinate strings should be in \"latitude,longitude\" format)\n    if (!validateCoordinate(point1Value) || !validateCoordinate(point2Value)) {\n        // Write an error message to cell C3\n        sheet.getRange(\"C3\").setValue(\"Invalid coordinate format\");\n        return;\n    }\n\n    // Parse coordinates into latitude and longitude numbers using arrow functions\n    const [lat1, lon1]: [number, number] = point1Value.split(\",\").map(s => parseFloat(s.trim())) as [number, number];\n    const [lat2, lon2]: [number, number] = point2Value.split(\",\").map(s => parseFloat(s.trim())) as [number, number];\n\n    // Generate a GeoJSON payload representing a line between the two points\n    const geoJson: FeatureCollection = {\n        type: \"FeatureCollection\",\n        features: [{\n            type: \"Feature\",\n            geometry: {\n                type: \"LineString\",\n                coordinates: [[lon1, lat1], [lon2, lat2]] // Note: GeoJSON uses [longitude, latitude]\n            },\n            properties: {}\n        }]\n    };\n\n    // Mapbox Static Image API parameters\n    const styleId: string = \"mapbox/streets-v12\"; // Mapbox style to use\n    const accessToken: string = mapbox_token; // Replace with your actual Mapbox access token\n    const encodedGeoJson: string = encodeURIComponent(JSON.stringify(geoJson));\n\n    // Construct the Mapbox API URL for the static map with the GeoJSON overlay\n    const mapUrl: string = `https://api.mapbox.com/styles/v1/${styleId}/static/geojson(${encodedGeoJson})/auto/800x600@2x?access_token=${accessToken}`;\n\n    // Create a hyperlink object pointing to the map URL\n    const hyperlink: ExcelScript.RangeHyperlink = {\n        address: mapUrl,\n        textToDisplay: \"View Vector Map\",\n        screenTip: \"Click to view the map\"\n    };\n\n    // Write the hyperlink to cell C3\n    const targetCell: ExcelScript.Range = sheet.getRange(\"c2\");\n    targetCell.setHyperlink(hyperlink);\n}\n\n/**\n * Interfaces for GeoJSON objects\n */\ninterface FeatureCollection {\n    type: \"FeatureCollection\";\n    features: Feature[];\n}\n\ninterface Feature {\n    type: \"Feature\";\n    geometry: Geometry;\n    properties: {};\n}\n\ninterface Geometry {\n    type: \"LineString\";\n    coordinates: [number, number][];\n}\n\n/**\n * Validates that the coordinate string is in the format \"latitude,longitude\"\n * where latitude and longitude are decimal numbers.\n * @param {string} coord - The coordinate string to validate.\n * @returns {boolean} - Returns true if the format is valid, false otherwise.\n */\nfunction validateCoordinate(coord: string): boolean {\n    // Regular expression to match coordinate format\n    const regex: RegExp = /^\\s*-?\\d+(\\.\\d+)?\\s*,\\s*-?\\d+(\\.\\d+)?\\s*$/;\n    return regex.test(coord);\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}