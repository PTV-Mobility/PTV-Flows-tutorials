{"version":"0.3.0","body":"/**\n * Office 365 Script:\n * This script is designed to run within Office 365 (specifically Excel Online) using Office Scripts.\n * It retrieves the KPI Name from cell A3 of the Config worksheet.\n * It then searches for the corresponding link information in the 'location' table.\n * For each link, it makes API requests to retrieve historical time series data and writes the results \n * to the 'DetailedHistoricalKPIResults' worksheet.\n * Additionally, it creates a pivot table in 'PivotHistoricalKPIResults' worksheet and logs request details.\n *\n * IMPORTANT:\n * - Any future modifications to this script should take into account that it's an Office 365 Script.\n * - All comments are intentionally kept to provide context and aid understanding for developers and LLMs.\n *\n * @param workbook The current workbook.\n */\n\ninterface TimeSeriesResponse {\n  metaData: {\n    networkData: Array<{\n      idno: number;\n      fromNode: number;\n      openLr: string;\n      mapVersion: string;\n    }>;\n    requestInfo: {\n      streetCode: string;\n      retrievedAt: string;\n      interval: string;\n      valueType: string;\n    };\n  };\n  timeSeries: {\n    speed: number[];\n    probeCount: (number | null)[];\n    fdat: string[];\n  };\n}\n\n/**\n * Main function to run the Historical KPI script.\n * \n * @param workbook The current workbook.\n */\nasync function main(workbook: ExcelScript.Workbook): Promise<void> {\n  // Read config values from Config sheet\n  const configSheet = workbook.getWorksheet(\"Config\");\n  if (!configSheet) {\n    throw new Error(\"Config sheet not found\");\n  }\n\n  const kpiName = configSheet.getRange(\"A3\").getValue() as string;\n  const fromTime = configSheet.getRange(\"B3\").getValue() as string;\n  const toTime = configSheet.getRange(\"C3\").getValue() as string;\n  const apiKey = configSheet.getRange(\"B1\").getValue() as string;\n  const timeAggregation = configSheet.getRange(\"D3\").getValue() as string;\n\n  // Ensure the API key is provided\n  if (!apiKey) {\n    logRequest(workbook, \"https://api.ptvgroup.tech/hda/v1/time-series/get\", \"Error: API key missing\");\n    return;\n  }\n\n  // Get location information from the Location table\n  let locationTable = workbook.getTable(\"location\");\n  if (!locationTable) {\n    throw new Error(\"Location table not found. Please run the getLocationDetails script first.\");\n  }\n\n  // Get the row data from the location table\n  let locationData = locationTable.getRangeBetweenHeaderAndTotal().getValues();\n\n  // --- Create HistoricalKPIDetails Worksheet ---\n  let finalResults: (string | number)[][] = [];\n\n  // Process each link\n  for (let i = 0; i < locationData.length; i++) {\n    let row = locationData[i];\n    const strt = row[0] as number; // strt column\n    const fsnd = row[1] as number; // fsnd column\n\n    // Construct API URL for this link\n    let apiUrl = `https://api.ptvgroup.tech/hda/v1/time-series/get?fromTime=${encodeURIComponent(fromTime)}&toTime=${encodeURIComponent(toTime)}&streetIdno=${strt}&streetFromNode=${fsnd}&timeAggregation=${encodeURIComponent(timeAggregation)}`;\n\n    if (i === 0 || i === locationData.length - 1) {\n      const decodedApiUrl = decodeURIComponent(apiUrl);\n      logRequest(workbook, \"API URL\", `${i === 0 ? \"First\" : \"Last\"} Link API URL: ${decodedApiUrl}`);\n    }\n\n    try {\n      // Make API call\n      let response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'apiKey': apiKey,\n          'User-Agent': 'OfficeScript'\n        }\n      });\n\n      if (!response.ok) {\n        logRequest(workbook, apiUrl, `Error: HTTP ${response.status}`);\n        continue;\n      }\n\n      let data: TimeSeriesResponse = await response.json();\n\n      // Check if data.timeSeries is defined\n      if (!data.timeSeries) {\n        logRequest(workbook, apiUrl, \"Error: data.timeSeries is undefined\");\n        continue;\n      }\n\n      // Process the timeseries data\n      const timestamps = data.timeSeries.fdat;\n      const speeds = data.timeSeries.speed;\n\n      // Check if timestamps or speeds are undefined\n      if (!timestamps || !speeds) {\n        logRequest(workbook, apiUrl, \"Error: timestamps or speeds is undefined\");\n        continue;\n      }\n\n      // Combine data for each timestamp\n      for (let i = 0; i < timestamps.length; i++) {\n        finalResults.push([\n          timestamps[i],             // Timestamp\n          speeds[i] || \"\",           // Speed value\n          `${strt}-${fsnd}`,       // Link Key (ID-FromNode)\n        ]);\n      }\n    } catch (error) {\n      const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n      logRequest(workbook, apiUrl, `Error: ${errorMessage}`);\n    }\n  }\n\n  // Define headers for the detailed data\n  const resultHeaders = [\"Timestamp\", \"Speed (km/h)\", \"Link Key\"];\n\n  // --- Create DetailedHistoricalKPIResults Worksheet ---\n  const detailSheet = await deleteAndCreateWorksheet(workbook, \"DetailedHistoricalKPIResults\");\n\n  // Write header metadata at the top\n  detailSheet.getRange(\"A1\").setValue(`KPI Name: ${kpiName}`);\n  detailSheet.getRange(\"A2\").setValue(`Date Range: ${fromTime} to ${toTime}`);\n\n  // Determine the starting row for the detailed table.\n  // We use row 4 (zero-indexed row 3) for the header row of the table.\n  const headerRowIndex = 3; // Excel row 4\n  // Limit the number of rows to write to the worksheet\n  const maxRows = 1000000;\n  const numberOfDataRows = Math.min(finalResults.length, maxRows);\n  const numberOfColumns = resultHeaders.length;\n\n  if (finalResults.length > maxRows) {\n    logRequest(workbook, \"DataTruncation\", `Reached maximum number of rows (${maxRows}). Data truncated at ${new Date().toISOString()}.`);\n  }\n\n  // Write the header row for the table.\n  console.log(`headerRowIndex: ${headerRowIndex}, numberOfColumns: ${numberOfColumns}`);\n  detailSheet.getRangeByIndexes(headerRowIndex, 0, 1, numberOfColumns).setValues([resultHeaders]);\n\n  // Write the data rows for the table, starting one row below the header.\n  if (numberOfDataRows > 0) {\n    console.log(`headerRowIndex + 1: ${headerRowIndex + 1}, numberOfDataRows: ${numberOfDataRows}, numberOfColumns: ${numberOfColumns}`);\n    detailSheet.getRangeByIndexes(headerRowIndex + 1, 0, numberOfDataRows, numberOfColumns).setValues(finalResults.slice(0, numberOfDataRows));\n  }\n\n  // Create a table from the range that includes headers and data.\n  const totalRows = numberOfDataRows + 1; // headers + data rows\n  console.log(`headerRowIndex: ${headerRowIndex}, totalRows: ${totalRows}, numberOfColumns: ${numberOfColumns}`);\n  const dataRangeForTable = detailSheet.getRangeByIndexes(headerRowIndex, 0, totalRows, numberOfColumns);\n  const detailedTable = detailSheet.addTable(dataRangeForTable, true);\n  detailedTable.setName(\"DetailedHistoricalKPIResultsTable\");\n\n  // Auto-fit the columns to display all data.\n  detailSheet.getUsedRange()?.getFormat().autofitColumns();\n\n  // --- Create PivotHistoricalKPIResults Worksheet ---\n  const pivotSheet = await deleteAndCreateWorksheet(workbook, \"PivotHistoricalKPIResults\");\n\n  // Read length from Location sheet\n  let locationSheet = workbook.getWorksheet(\"Location\");\n  if (!locationSheet) {\n    logRequest(workbook, \"PivotSetup\", \"Location sheet not found.\");\n    return;\n  }\n  let lengthText = locationSheet.getRange(\"A4\").getValue() as string;\n  let lengthInKilometers: number;\n\n  try {\n    // Parse the length value from the text\n    const lengthValue = lengthText.split(\": \")[1];\n    lengthInKilometers = parseFloat(lengthValue);\n    if (isNaN(lengthInKilometers)) {\n      throw new Error(\"Could not parse length from Location sheet.\");\n    }\n  } catch (error) {\n    logRequest(workbook, \"PivotSetup\", `Error parsing length: ${error}`);\n    return;\n  }\n\n  // Write header metadata at the top of the pivot sheet\n  pivotSheet.getRange(\"A1\").setValue(`KPI Name: ${kpiName}`);\n  pivotSheet.getRange(\"A2\").setValue(`Date Range: ${fromTime} to ${toTime}`);\n\n  // Replace the pivot table creation call with passing the Table and a Range object\n  try {\n    const pivotTargetRange = pivotSheet.getRange(\"A5\");\n    // Using detailedTable directly as the source (of type Table)\n    const pivotTable = workbook.addPivotTable(\"PivotAvgSpeed\", detailedTable, pivotTargetRange);\n    if (!pivotTable) {\n      throw new Error(\"Failed to create pivot table\");\n    }\n\n    // Add the Timestamp field as a row hierarchy\n    const timestampHierarchy = pivotTable.getHierarchy(\"Timestamp\");\n    if (timestampHierarchy) {\n      pivotTable.addRowHierarchy(timestampHierarchy);\n    } else {\n      logRequest(workbook, \"PivotSetup\", \"Timestamp field not found in pivot table source.\");\n      return;\n    }\n\n    // Add the Speed (km/h) field as a data hierarchy with proper formatting\n    const speedHierarchy = pivotTable.getHierarchy(\"Speed (km/h)\");\n    if (speedHierarchy) {\n      const dataHierarchy = pivotTable.addDataHierarchy(speedHierarchy);\n      dataHierarchy.setName(\"Average Speed\");\n      dataHierarchy.setNumberFormat(\"0.00\");\n\n      // Change summarization to average\n      dataHierarchy.setSummarizeBy(ExcelScript.AggregationFunction.average);\n\n      // Sort timestamps in ascending order using the correct method\n      const timestampField = timestampHierarchy.getFields()[0];\n      timestampField.sortByLabels(ExcelScript.SortBy.ascending);\n    } else {\n      logRequest(workbook, \"PivotSetup\", \"Speed (km/h) field not found in pivot table source.\");\n      return;\n    }\n\n    // Refresh the pivot table to apply the changes\n    pivotTable.refresh();\n\n    // Add a chart next to the pivot table\n    const pivotRange = pivotTable.getLayout().getRange();\n    const pivotWidth = pivotRange.getColumnCount();\n\n    // Determine the column for the formula\n    const travelTimeColumn = String.fromCharCode(65 + pivotWidth); // Convert to column letter (A, B, C, etc.)\n\n    // Add header for travel time\n    pivotSheet.getRange(`${travelTimeColumn}5`).setValue(\"Travel Time (minutes)\");\n\n    // Get the number of rows in the pivot table\n    const pivotRowCount = pivotRange.getRowCount();\n\n    // Add formula to each row\n    for (let i = 6; i < pivotRowCount + 5; i++) {\n      const speedCell = `B${i}`; // Assuming \"Average Speed\" is in column B (after Timestamp)\n      const travelTimeFormula = `= ${lengthInKilometers} / (${speedCell} / 60)`;\n      pivotSheet.getRange(`${travelTimeColumn}${i}`).setFormula(travelTimeFormula);\n    }\n\n    let columnLetter = String.fromCharCode(65 + pivotWidth + 1);\n    // Create a line chart\n    const chart = pivotSheet.addChart(ExcelScript.ChartType.line, pivotRange);\n\n    // Position and size (using cell reference instead of number)\n    chart.setPosition(`${columnLetter}5`); // Example: If pivotWidth is 2, this becomes \"C5\"\n    chart.setWidth(600);\n    chart.setHeight(400);\n\n    // Configure chart title\n    const chartTitle = chart.getTitle();\n    chartTitle.setText(\"Speed Trend Over Time\");\n\n    // Configure axes\n    const categoryAxis = chart.getAxes().getCategoryAxis();\n    const valueAxis = chart.getAxes().getValueAxis();\n\n    // Configure time axis (category axis)\n    categoryAxis.setCategoryType(ExcelScript.ChartAxisCategoryType.dateAxis);\n    const categoryTitle = categoryAxis.getTitle();\n    categoryTitle.setText(\"Time\");\n    categoryAxis.setTickLabelPosition(ExcelScript.ChartAxisTickLabelPosition.low);\n\n    // Calculate time span in hours\n    const startDate = new Date(fromTime);\n    const endDate = new Date(toTime);\n    const hoursDiff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60);\n\n    // Configure axis based on time span\n    if (hoursDiff <= 24) {\n      // For data within 24 hours\n      categoryAxis.setNumberFormat(\"HH:mm\");\n      categoryAxis.setTickLabelSpacing(12); // Every 12 points (1 hour if 5-min data)\n    } else if (hoursDiff <= 72) {\n      // For 1-3 days of data\n      categoryAxis.setNumberFormat(\"ddd HH:mm\");\n      categoryAxis.setTickLabelSpacing(24); // Every 24 points (2 hours if 5-min data)\n    } else {\n      // For more than 3 days\n      categoryAxis.setNumberFormat(\"mm/dd HH:mm\");\n      categoryAxis.setTickLabelSpacing(72); // Every 72 points (6 hours if 5-min data)\n    }\n\n    // Set tick mark spacing to create visual subdivisions\n    categoryAxis.setTickMarkSpacing(Math.floor(categoryAxis.getTickLabelSpacing() / 4));\n\n    // Configure value axis\n    const valueTitle = valueAxis.getTitle();\n    valueTitle.setText(\"Average Speed (km/h)\");\n    valueAxis.setNumberFormat(\"#,##0.00\");\n    valueAxis.setMinimum(0);\n\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, \"PivotSetup\", `Error creating pivot table: ${errorMessage}`);\n    return;\n  }\n  // Add a travel time chart below the average speed chart\n  try {\n    const pivotSheet = workbook.getWorksheet(\"PivotHistoricalKPIResults\");\n    if (!pivotSheet) {\n      logRequest(workbook, \"PivotSetup\", \"PivotHistoricalKPIResults sheet not found.\");\n      return;\n    }\n\n    const pivotTable = pivotSheet.getPivotTables()[0];\n    if (!pivotTable) {\n      logRequest(workbook, \"PivotSetup\", \"Pivot table not found.\");\n      return;\n    }\n\n    const pivotRange = pivotTable.getLayout().getRange();\n    const pivotWidth = pivotRange.getColumnCount();\n    const pivotRowCount = pivotRange.getRowCount() - 1; // Subtract 1 to exclude grand total row\n\n    // Copy timestamps from pivot table to column D (outside pivot table), excluding grand total\n    const timestampSourceRange = pivotSheet.getRange(`A6:A${pivotRowCount + 4}`); // +4 instead of +5 to exclude grand total\n    const timestampValues = timestampSourceRange.getValues();\n    pivotSheet.getRange(`D6:D${pivotRowCount + 4}`).setValues(timestampValues);\n\n    // Create chart using data from both columns\n    const travelTimeChart = pivotSheet.addChart(ExcelScript.ChartType.line, pivotSheet.getRange(`C6:D${pivotRowCount + 4}`));\n\n    // Configure the chart series to use D column as X-axis\n    const series = travelTimeChart.getSeries()[0]; // Get first (and only) series\n    series.setXAxisValues(pivotSheet.getRange(`D6:D${pivotRowCount + 4}`));\n    series.setValues(pivotSheet.getRange(`C6:C${pivotRowCount + 4}`));\n\n    // Position chart below speed chart\n    let columnLetter = String.fromCharCode(65 + pivotWidth + 1);\n    travelTimeChart.setPosition(`${columnLetter}${parseInt(\"5\") + 25}`); // Changed from +20 to +25 for more space\n    travelTimeChart.setWidth(600);\n    travelTimeChart.setHeight(400);\n\n    // Chart configuration\n    travelTimeChart.getTitle().setText(\"Travel Time Trend Over Time\");\n\n    // Configure axes\n    const categoryAxis = travelTimeChart.getAxes().getCategoryAxis();\n    const valueAxis = travelTimeChart.getAxes().getValueAxis();\n\n    categoryAxis.setCategoryType(ExcelScript.ChartAxisCategoryType.dateAxis);\n    categoryAxis.getTitle().setText(\"Time\");\n    categoryAxis.setTickLabelPosition(ExcelScript.ChartAxisTickLabelPosition.low);\n\n    // Time formatting based on date range\n    const startDate = new Date(fromTime);\n    const endDate = new Date(toTime);\n    const hoursDiff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60);\n\n    // Time formatting based on date range for travel time chart\n    if (hoursDiff <= 24) {\n      categoryAxis.setNumberFormat(\"HH:mm\");\n      categoryAxis.setTickLabelSpacing(12);\n    } else if (hoursDiff <= 72) {\n      categoryAxis.setNumberFormat(\"ddd HH:mm\");\n      categoryAxis.setTickLabelSpacing(24);\n    } else {\n      categoryAxis.setNumberFormat(\"mm/dd HH:mm\");\n      categoryAxis.setTickLabelSpacing(72);\n    }\n\n    categoryAxis.setTickMarkSpacing(Math.floor(categoryAxis.getTickLabelSpacing() / 4));\n\n    valueAxis.getTitle().setText(\"Travel Time (minutes)\");\n    valueAxis.setNumberFormat(\"#,##0.00\");\n    valueAxis.setMinimum(0);\n\n  } catch (error) {\n    const errorMessage = (error instanceof Error) ? error.message : JSON.stringify(error);\n    logRequest(workbook, \"ChartSetup\", `Error creating travel time chart: ${errorMessage}`);\n    return;\n  }\n  // Set user focus on the pivot tab\n  pivotSheet.activate();\n}\n\n/**\n * Logs a message to a \"Log\" worksheet in the workbook.\n * If the \"Log\" worksheet doesn't exist, it is created.\n *\n * @param workbook The current workbook.\n * @param source Identifier for the message source.\n * @param message The message to log.\n */\nfunction logRequest(workbook: ExcelScript.Workbook, source: string, message: string): void {\n  // Retrieve or create the Log worksheet.\n  let logSheet = workbook.getWorksheet(\"Log\");\n  if (!logSheet) {\n    logSheet = workbook.addWorksheet(\"Log\");\n  }\n\n  // Determine the next empty row in the log sheet (assumes log messages are in column A).\n  const usedRange = logSheet.getUsedRange();\n  const nextRow = usedRange ? usedRange.getRowCount() + 1 : 1;\n  const timeStamp = new Date().toISOString();\n  logSheet.getRange(`A${nextRow}`).setValue(`${timeStamp} - ${source} - ${message}`);\n}\n\nasync function deleteAndCreateWorksheet(workbook: ExcelScript.Workbook, name: string): Promise<ExcelScript.Worksheet> {\n  // Try to delete existing worksheet\n  try {\n    const existingSheet = workbook.getWorksheet(name);\n    if (existingSheet) {\n      existingSheet.delete();\n      // Give Excel some time to complete the deletion\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  } catch (error) {\n    logRequest(workbook, \"WorksheetSetup\", `Warning: Error deleting ${name} sheet: ${error}`);\n  }\n\n  // Try to create new worksheet with retries\n  let maxRetries = 3;\n  let newSheet: ExcelScript.Worksheet | null = null;\n\n  while (maxRetries > 0 && !newSheet) {\n    try {\n      newSheet = workbook.addWorksheet(name);\n      break;\n    } catch (error) {\n      maxRetries--;\n      if (maxRetries === 0) {\n        throw new Error(`Failed to create worksheet ${name} after multiple attempts`);\n      }\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n  }\n\n  return newSheet!;\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Main function to run the Historical KPI script.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"The current workbook.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}