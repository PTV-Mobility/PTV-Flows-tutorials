{"version":"0.3.0","body":"/**\n * Main function to extract latitudes and longitudes from the LRPs in the JSON data,\n * output them to Excel starting from cell A12, and create a hyperlink in Excel that opens OpenStreetMap\n * with directions between the first two LRPs.\n *\n * **Important Note for Future Developers and LLMs:**\n * The comments within this script are crucial for understanding its functionality and for any future maintenance or revisions.\n * Please ensure that these comments are preserved and not removed or altered.\n *\n * @param workbook - The Excel workbook instance provided by the Office Scripts environment.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active worksheet from the workbook.\n  const sheet: ExcelScript.Worksheet = workbook.getActiveWorksheet();\n\n  // Get the JSON data from a cell (assuming it's in cell A11).\n  // The cell should contain the JSON data as a string.\n  const jsonDataString: string = sheet.getRange(\"A11\").getValue() as string;\n\n  // Define interfaces to match the JSON structure.\n\n  // Interface for the header (if needed, otherwise can be omitted or set to unknown).\n  interface Header {\n    raw: number;\n    pointFlag: boolean;\n    extraLRPs: number;\n    offsetPresent: boolean;\n    crcPresent: boolean;\n    numberOfLRPs: number;\n  }\n\n  // Interface for an LRP.\n  interface Lrp {\n    frc: number;\n    fow: number;\n    bearing: number;\n    lat: number;\n    lon: number;\n  }\n\n  // Interface for the entire JSON data.\n  interface JsonData {\n    header: Header;\n    lrps: Lrp[];\n    positiveOffset: number;\n    negativeOffset: number;\n  }\n\n  // Parse the JSON data string into an object.\n  let jsonData: JsonData;\n  try {\n    jsonData = JSON.parse(jsonDataString) as JsonData;\n  } catch (error) {\n    // If parsing fails, write an error message and exit the function.\n    sheet.getRange(\"A11\").setValue(\"Invalid JSON data in cell A11\");\n    return;\n  }\n\n  // Check if the 'lrps' array exists in the JSON data.\n  if (!jsonData.lrps || !Array.isArray(jsonData.lrps)) {\n    sheet.getRange(\"A11\").setValue(\"No 'lrps' array found in JSON data\");\n    return;\n  }\n\n  // Write the header starting at cell A12.\n  // Adjust the range to cover three columns (A12:C12).\n  sheet.getRange(\"A12:C12\").setValues([[\"lrp\", \"lat\", \"lon\"]]);\n\n  // Extract lat and lon from each lrp and write them to the sheet.\n  const lrps: Lrp[] = jsonData.lrps;\n  const startRow: number = 13; // Data starts from row 13\n\n  for (let i = 0; i < lrps.length; i++) {\n    const lrp: Lrp = lrps[i];\n    const lat: number = lrp.lat;\n    const lon: number = lrp.lon;\n    const row: number = startRow + i;\n    sheet.getRange(`A${row}`).setValue(i + 1); // lrp number\n    sheet.getRange(`B${row}`).setValue(lat);\n    sheet.getRange(`C${row}`).setValue(lon);\n  }\n\n  // After the data, insert a space (we can leave an empty row).\n  const linkRow: number = startRow + lrps.length + 1;\n\n  // Check if there are at least two lrps to create the hyperlink.\n  if (lrps.length >= 2) {\n    // Get the first two lrps' coordinates.\n    const lat1: number = lrps[0].lat;\n    const lon1: number = lrps[0].lon;\n    const lat2: number = lrps[1].lat;\n    const lon2: number = lrps[1].lon;\n\n    // Calculate the center point between the two coordinates for map centering.\n    const centerLat: number = (lat1 + lat2) / 2;\n    const centerLon: number = (lon1 + lon2) / 2;\n\n    // Define the zoom level for the map view (0 to 19, where higher is more zoomed in).\n    const zoomLevel: number = 12; // Adjust this value based on the desired map zoom.\n\n    // Construct the OpenStreetMap Directions URL with the from and to coordinates.\n    // This URL opens OSM with a route between the two specified points.\n    const osmUrl: string = `https://www.openstreetmap.org/directions?engine=graphhopper_car&route=${lat1}%2C${lon1}%3B${lat2}%2C${lon2}#map=${zoomLevel}/${centerLat}/${centerLon}`;\n\n    // Create a hyperlink object to be inserted into the Excel sheet.\n    const hyperlink: ExcelScript.RangeHyperlink = {\n      address: osmUrl, // The URL to open when the hyperlink is clicked.\n      textToDisplay: \"Open OSM Directions\", // The text displayed in the Excel cell.\n      screenTip: \"Click to view directions on OpenStreetMap\", // Tooltip text on hover.\n    };\n\n    // Target the cell to insert the hyperlink.\n    const targetCell: ExcelScript.Range = sheet.getRange(`A${linkRow}`);\n\n    // Clear any existing content or hyperlinks in the target cell before inserting the new hyperlink.\n    targetCell.clear();\n\n    // Set the hyperlink on the target cell.\n    targetCell.setHyperlink(hyperlink);\n\n    // Set the cell's value to the display text.\n    targetCell.setValue(hyperlink.textToDisplay);\n  } else {\n    // If there are not enough lrps, write a message.\n    sheet.getRange(`A${linkRow}`).setValue(\"Not enough LRPs to create a hyperlink\");\n  }\n}","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}},\"signature\":{\"comment\":\"Main function to extract latitudes and longitudes from the LRPs in the JSON data,\\noutput them to Excel starting from cell A12, and create a hyperlink in Excel that opens OpenStreetMap\\nwith directions between the first two LRPs.\\n\\n**Important Note for Future Developers and LLMs:**\\nThe comments within this script are crucial for understanding its functionality and for any future maintenance or revisions.\\nPlease ensure that these comments are preserved and not removed or altered.\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"- The Excel workbook instance provided by the Office Scripts environment.\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}